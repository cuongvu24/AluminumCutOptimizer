import pandas as pd
import streamlit as st
import io
import time
import plotly.graph_objects as go
from cutting_optimizer import optimize_cutting
from W utils import create_output_excel, create_accessory_summary, validate_input_excel

# H√†m hi·ªÉn th·ªã m√¥ ph·ªèng c·∫Øt thanh
def display_pattern(row, cutting_gap):
    pattern = row['M·∫´u C·∫Øt']
    parts = pattern.split('+')
    current_pos = 0
    fig = go.Figure()

    for i, part in enumerate(parts):
        length = float(part)
        color = f"rgba({(i*40)%255}, {(i*70)%255}, {(i*90)%255}, 0.7)" if i > 0 else "rgba(255, 100, 100, 0.9)"
        fig.add_shape(
            type="rect",
            x0=current_pos, x1=current_pos + length,
            y0=0, y1=1,
            line=dict(width=1),
            fillcolor=color
        )
        fig.add_annotation(
            x=current_pos + length / 2, y=0.5,
            text=str(int(length)),
            showarrow=False,
            font=dict(size=10, color="white")
        )
        current_pos += length + cutting_gap

    fig.update_layout(
        height=100,
        margin=dict(l=10, r=10, t=10, b=10),
        xaxis=dict(title="", range=[0, row['Chi·ªÅu D√†i Thanh']]),  # ƒê·∫∑t title th√†nh chu·ªói r·ªóng
        yaxis=dict(visible=False),
        showlegend=False
    )
    st.plotly_chart(fig, use_container_width=True, key=f"plot_{row['S·ªë Thanh']}")

# C·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a", layout="wide")
st.title("ü§ñ Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a")

uploaded_file = st.file_uploader("üì§ T·∫£i l√™n t·ªáp Excel d·ªØ li·ªáu", type=["xlsx", "xls"])
if 'result_data' not in st.session_state:
    st.session_state.result_data = None

tab_upload, tab_phu_kien, tab_cat_nhom = st.tabs(["üìÅ T·∫£i M·∫´u Nh·∫≠p", "üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu C·∫Øt Nh√¥m"])

# Tab T·∫£i M·∫´u Nh·∫≠p
with tab_upload:
    st.subheader("üì• T·∫£i xu·ªëng m·∫´u nh·∫≠p li·ªáu")
    st.markdown("""
    üëâ Vui l√≤ng s·ª≠ d·ª•ng c√°c m·∫´u b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ch√≠nh x√°c khi nh·∫≠p li·ªáu:
    - **M·∫´u C·∫Øt Nh√¥m** g·ªìm c√°c c·ªôt: `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`
    - **M·∫´u Ph·ª• Ki·ªán** g·ªìm c√°c c·ªôt: `M√£ ph·ª• ki·ªán`, `T√™n ph·ª• phi·ªán`, `ƒê∆°n v·ªã t√≠nh`, `S·ªë l∆∞·ª£ng`
    """)
    nhom_sample = pd.DataFrame({'Profile Code': ['ABC', 'ABC'], 'Length': [1000, 1200], 'Quantity': [3, 4]})
    out_nhom = io.BytesIO()
    nhom_sample.to_excel(out_nhom, index=False)
    out_nhom.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u c·∫Øt nh√¥m", out_nhom, "mau_cat_nhom.xlsx")

    pk_sample = pd.DataFrame({
        'M√£ ph·ª• ki·ªán': ['PK001', 'PK002'],
        'T√™n ph·ª• phi·ªán': ['GioƒÉng', 'Bulong'],
        'ƒê∆°n v·ªã t√≠nh': ['c√°i', 'b·ªô'],
        'S·ªë l∆∞·ª£ng': [10, 20]
    })
    out_pk = io.BytesIO()
    pk_sample.to_excel(out_pk, index=False)
    out_pk.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u ph·ª• ki·ªán", out_pk, "mau_phu_kien.xlsx")

# Tab T·ªïng H·ª£p Ph·ª• Ki·ªán
with tab_phu_kien:
    st.subheader("üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán")
    if uploaded_file:
        try:
            acc_df = pd.read_excel(uploaded_file)
            output = io.BytesIO()
            summary_df = create_accessory_summary(acc_df, output)
            output.seek(0)
            st.success("‚úÖ T·ªïng h·ª£p th√†nh c√¥ng!")
            st.dataframe(summary_df)
            st.download_button("üì• T·∫£i Xu·ªëng File T·ªïng H·ª£p Ph·ª• Ki·ªán", output, "tong_hop_phu_kien.xlsx")
        except Exception as e:
            st.warning("‚ö†Ô∏è File kh√¥ng ph√π h·ª£p ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt.")

# Tab T·ªëi ∆Øu C·∫Øt Nh√¥m
with tab_cat_nhom:
    st.subheader("‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m")
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file)
            valid, message = validate_input_excel(df)
            if not valid:
                st.error(message)
            else:
                st.success("‚úÖ D·ªØ li·ªáu nh√¥m h·ª£p l·ªá!")
                st.dataframe(df)

                # G·ªôp c√°c tr∆∞·ªùng nh·∫≠p li·ªáu v√†o m·ªôt h√†ng v·ªõi 3 c·ªôt
                col1, col2, col3 = st.columns(3)

                with col1:
                    length_text = st.text_input("Nh·∫≠p k√≠ch th∆∞·ªõc thanh (mm, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)", "5800, 6000, 6200, 6500")

                with col2:
                    cutting_gap = st.number_input("Kho·∫£ng c√°ch c·∫Øt (mm)", 1, 100, 10, 1)

                with col3:
                    optimization_method = st.selectbox("Ph∆∞∆°ng ph√°p t·ªëi ∆∞u", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh"])

                # N√∫t t·ªëi ∆∞u h√≥a
                if st.button("üöÄ T·ªëi ∆Øu H√≥a"):
                    # Chuy·ªÉn chu·ªói k√≠ch th∆∞·ªõc thanh th√†nh danh s√°ch s·ªë
                    stock_length_options = [int(x.strip()) for x in length_text.split(",") if x.strip().isdigit()]

                    if not stock_length_options:
                        st.error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt k√≠ch th∆∞·ªõc thanh.")
                    else:
                        try:
                            start_time = time.time()
                            result_df, patterns_df, summary_df = optimize_cutting(
                                df,
                                cutting_gap=cutting_gap,
                                optimization_method=optimization_method,
                                stock_length_options=stock_length_options,
                                optimize_stock_length=True
                            )
                            elapsed = time.time() - start_time
                            st.success(f"‚úÖ Ho√†n t·∫•t trong {elapsed:.2f} gi√¢y")
                            st.session_state.result_data = (result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
                        except Exception as opt_err:
                            st.error(f"‚ùå L·ªói t·ªëi ∆∞u h√≥a: {opt_err}")
        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    if st.session_state.result_data:
        result_df, patterns_df, summary_df, stock_length_options, cutting_gap = st.session_state.result_data

        # ƒê·ªïi t√™n c·ªôt cho b·∫£ng t·ªïng h·ª£p
        summary_df = summary_df.rename(columns={
            'Profile Code': 'M√£ Thanh',
            'Total Pieces': 'T·ªïng ƒêo·∫°n C·∫Øt',
            'Total Bars Used': 'S·ªë Thanh S·ª≠ D·ª•ng',
            'Total Length Needed (mm)': 'T·ªïng Chi·ªÅu D√†i C·∫ßn (mm)',
            'Total Stock Length (mm)': 'T·ªïng Chi·ªÅu D√†i Nguy√™n Li·ªáu (mm)',
            'Waste (mm)': 'Ph·∫ø Li·ªáu (mm)',
            'Overall Efficiency': 'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ',
            'Average Bar Efficiency': 'Hi·ªáu Su·∫•t Trung B√¨nh'
        })
        st.subheader("üìä B·∫£ng T·ªïng H·ª£p Hi·ªáu Su·∫•t")
        st.dataframe(summary_df)

        # ƒê·ªïi t√™n c·ªôt cho b·∫£ng m·∫´u c·∫Øt
        patterns_df = patterns_df.rename(columns={
            'Profile Code': 'M√£ Thanh',
            'Bar Number': 'S·ªë Thanh',
            'Stock Length': 'Chi·ªÅu D√†i Thanh',
            'Used Length': 'Chi·ªÅu D√†i S·ª≠ D·ª•ng',
            'Remaining Length': 'Chi·ªÅu D√†i C√≤n L·∫°i',
            'Efficiency': 'Hi·ªáu Su·∫•t',
            'Cutting Pattern': 'M·∫´u C·∫Øt',
            'Pieces': 'S·ªë ƒêo·∫°n C·∫Øt'
        })
        st.subheader("üìã Danh S√°ch M·∫´u C·∫Øt")
        st.dataframe(patterns_df)

        # ƒê·ªïi t√™n c·ªôt cho b·∫£ng chi ti·∫øt m·∫£nh c·∫Øt
        result_df = result_df.rename(columns={
            'Profile Code': 'M√£ Thanh',
            'Item ID': 'M√£ M·∫£nh',
            'Length': 'Chi·ªÅu D√†i',
            'Bar Number': 'S·ªë Thanh'
        })
        st.subheader("üìÑ B·∫£ng Chi Ti·∫øt M·∫£nh C·∫Øt")
        st.dataframe(result_df)

        # M√¥ ph·ªèng c·∫Øt thanh
        st.subheader("üìä M√¥ Ph·ªèng C·∫Øt T·ª´ng Thanh")
        selected_profile = st.selectbox("Ch·ªçn M√£ Thanh", patterns_df['M√£ Thanh'].unique())
        filtered = patterns_df[patterns_df['M√£ Thanh'] == selected_profile]

        # Kh·ªüi t·∫°o bi·∫øn page trong session_state n·∫øu ch∆∞a c√≥
        if 'page' not in st.session_state:
            st.session_state.page = 0

        # Thi·∫øt l·∫≠p s·ªë d√≤ng m·ªói trang
        rows_per_page = 5
        total_rows = len(filtered)
        num_pages = (total_rows + rows_per_page - 1) // rows_per_page

        # T√≠nh ch·ªâ s·ªë b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c c·ªßa d√≤ng hi·ªÉn th·ªã
        start_idx = st.session_state.page * rows_per_page
        end_idx = start_idx + rows_per_page
        display_rows = filtered.iloc[start_idx:end_idx]

        # Hi·ªÉn th·ªã c√°c d√≤ng m√¥ ph·ªèng
        for idx, row in display_rows.iterrows():
            st.markdown(f"**üîπ #{row['S·ªë Thanh']} | {selected_profile} | {int(row['Chi·ªÅu D√†i Thanh'])}mm**")
            display_pattern(row, cutting_gap)

        # Th√™m n√∫t ƒëi·ªÅu h∆∞·ªõng
        col1, col2 = st.columns(2)
        with col1:
            if st.session_state.page > 0:
                if st.button("Trang tr∆∞·ªõc"):
                    st.session_state.page -= 1
        with col2:
            if st.session_state.page < num_pages - 1:
                if st.button("Trang sau"):
                    st.session_state.page += 1

        # (T√πy ch·ªçn) Hi·ªÉn th·ªã th√¥ng tin trang
        st.info(f"ƒêang hi·ªÉn th·ªã trang {st.session_state.page + 1}/{num_pages}")

        # T·∫£i xu·ªëng k·∫øt qu·∫£
        output = io.BytesIO()
        create_output_excel(output, result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
        output.seek(0)
        st.download_button("üì• T·∫£i Xu·ªëng File K·∫øt Qu·∫£ C·∫Øt Nh√¥m", output, "ket_qua_cat_nhom.xlsx")

# Footer
st.markdown("---")
st.markdown("M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Zalo 0977 487 639")
st.markdown("·ª®ng d·ª•ng h·ªó tr·ª£ s·∫£n xu·∫•t c·ª≠a ¬© 2025")
