import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from cutting_optimizer import optimize_cutting
from utils import validate_input_excel, create_output_excel
import io
import time

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m",
    page_icon="‚úÇÔ∏è",
    layout="wide"
)

# Thanh c√¥ng c·ª• b√™n tr√°i
with st.sidebar:
    st.title("‚úÇÔ∏è Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m")
    stock_length = st.number_input("Chi·ªÅu D√†i Ti√™u Chu·∫©n (mm)", min_value=1000, value=6000, step=100)
    cutting_gap = st.number_input("Kho·∫£ng C√°ch C·∫Øt (mm)", min_value=1, value=10, step=1)
    optimization_method = st.selectbox("Ph∆∞∆°ng Ph√°p T·ªëi ∆Øu", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh"])
    optimization_options = st.radio("T√πy Ch·ªçn T·ªëi ∆Øu K√≠ch Th∆∞·ªõc Thanh", [
        "S·ª≠ D·ª•ng Chi·ªÅu D√†i C·ªë ƒê·ªãnh",
        "T·ªëi ∆Øu Trong C√°c Gi√° Tr·ªã C·ªë ƒê·ªãnh",
        "T·ªëi ∆Øu Trong Kho·∫£ng Gi√° Tr·ªã"
    ])

    if optimization_options == "T·ªëi ∆Øu Trong Kho·∫£ng Gi√° Tr·ªã":
        st.markdown("**C·∫•u H√¨nh Kho·∫£ng T·ªëi ∆Øu**")
        min_len = st.number_input("Chi·ªÅu D√†i T·ªëi Thi·ªÉu (mm)", min_value=1000, max_value=10000, value=5500, step=100)
        max_len = st.number_input("Chi·ªÅu D√†i T·ªëi ƒêa (mm)", min_value=min_len, max_value=20000, value=6500, step=100)
        step_len = st.number_input("B∆∞·ªõc TƒÉng K√≠ch Th∆∞·ªõc (mm)", min_value=100, value=100, step=100)

        stock_length_options = list(range(min_len, max_len + 1, step_len))
        optimize_stock_length = True
    elif optimization_options == "T·ªëi ∆Øu Trong C√°c Gi√° Tr·ªã C·ªë ƒê·ªãnh":
        st.markdown("**Nh·∫≠p Danh S√°ch K√≠ch Th∆∞·ªõc C·ªë ƒê·ªãnh (mm)**")
        custom_lengths_text = st.text_area("Nh·∫≠p c√°c k√≠ch th∆∞·ªõc, c√°ch nhau b·∫±ng d·∫•u ph·∫©y ho·∫∑c xu·ªëng d√≤ng:", "3000, 4000, 5000, 5500, 6000, 6500")

        custom_lengths_raw = custom_lengths_text.replace("\n", ",").split(",")
        stock_length_options = [int(val.strip()) for val in custom_lengths_raw if val.strip().isdigit()]
        if not stock_length_options:
            st.warning("‚ö†Ô∏è Danh s√°ch k√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: 6000mm")
            stock_length_options = [6000]

        optimize_stock_length = True
    else:
        stock_length_options = [stock_length]
        optimize_stock_length = False

# Ti√™u ƒë·ªÅ v√† h∆∞·ªõng d·∫´n
st.title("‚úÇÔ∏è Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m")
st.markdown("[üì¶ Xem m√£ ngu·ªìn tr√™n GitHub](https://github.com/hero9xhn/AluminumCutOptimizer)")
st.markdown("""
Ph·∫ßn m·ªÅm gi√∫p t·ªëi ∆∞u h√≥a c·∫Øt nh√¥m ƒë·ªÉ gi·∫£m l√£ng ph√≠. T·∫£i l√™n file Excel v·ªõi th√¥ng tin c√°c thanh nh√¥m,
v√† nh·∫≠n k·∫ø ho·∫°ch c·∫Øt t·ªëi ∆∞u v·ªõi s·ªë li·ªáu chi ti·∫øt.
""")

# T·∫£i l√™n file Excel
uploaded_file = st.file_uploader("üì§ T·∫£i L√™n File Excel ƒê·∫ßu V√†o", type=["xlsx", "xls"])

if uploaded_file:
    try:
        input_data = pd.read_excel(uploaded_file)
        valid, message = validate_input_excel(input_data)

        if not valid:
            st.error(message)
        else:
            st.success("‚úÖ D·ªØ li·ªáu h·ª£p l·ªá! ƒêang t·ªëi ∆∞u h√≥a...")

            with st.spinner("üîÑ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                start_time = time.time()
                result_df, patterns_df, summary_df = optimize_cutting(
                    input_data,
                    stock_length=stock_length,
                    cutting_gap=cutting_gap,
                    optimization_method=optimization_method,
                    stock_length_options=stock_length_options,
                    optimize_stock_length=optimize_stock_length
                )
                end_time = time.time()

            st.success(f"üéâ Ho√†n t·∫•t sau {end_time - start_time:.2f} gi√¢y")

            # B·∫£ng t·ªïng h·ª£p hi·ªáu su·∫•t
            st.subheader("üìä B·∫£ng T·ªïng H·ª£p Hi·ªáu Su·∫•t")
            if 'Efficiency' not in summary_df.columns:
                summary_df['Efficiency'] = summary_df['Total Length Needed (mm)'] / summary_df['Total Stock Length (mm)']
                summary_df['Efficiency'] = summary_df['Efficiency'].fillna(0).apply(lambda x: f"{x*100:.2f}%")

            summary_df = summary_df.rename(columns={
                "Total Length Needed (mm)": "Chi·ªÅu D√†i C·∫ßn (mm)",
                "Total Stock Length (mm)": "Chi·ªÅu D√†i Thanh (mm)",
                "Efficiency": "Hi·ªáu Su·∫•t"
            })
            st.dataframe(summary_df)

            # Danh s√°ch m·∫´u c·∫Øt
            st.subheader("üìã Danh S√°ch M·∫´u C·∫Øt Chi Ti·∫øt")
            patterns_df = patterns_df.rename(columns={
                "Profile Code": "M√£ Thanh",
                "Bar Number": "S·ªë Thanh",
                "Cutting Pattern": "M·∫´u C·∫Øt",
                "Stock Length": "Chi·ªÅu D√†i Thanh",
                "Used Length": "Chi·ªÅu D√†i S·ª≠ D·ª•ng",
                "Waste": "Chi·ªÅu D√†i C√≤n L·∫°i",
                "Efficiency": "Hi·ªáu Su·∫•t",
                "Segment Count": "S·ªë ƒêo·∫°n C·∫Øt"
            })
            st.dataframe(patterns_df)

            # T·∫£i k·∫øt qu·∫£ v·ªÅ m√°y
            st.subheader("üì• T·∫£i K·∫øt Qu·∫£ V·ªÅ M√°y")
            output = io.BytesIO()
            create_output_excel(output, result_df, patterns_df, summary_df, stock_length, cutting_gap)
            output.seek(0)
            st.download_button("üì• T·∫£i Xu·ªëng B·∫£ng Excel K·∫øt Qu·∫£", output, "ket_qua_toi_uu.xlsx")

    except Exception as e:
        st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")

# Footer
st.markdown("---")
st.markdown("Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m ¬© 2025 By Cuong Vu")
