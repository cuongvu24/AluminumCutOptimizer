import pandas as pd
import streamlit as st
import io
import time
import plotly.graph_objects as go
from cutting_optimizer import optimize_cutting
from utils import create_output_excel, create_accessory_summary, validate_input_excel
import uuid

# H√†m hi·ªÉn th·ªã m√¥ ph·ªèng c·∫Øt thanh
def display_pattern(row, cutting_gap):
    pattern = row['M·∫´u C·∫Øt']
    parts = pattern.split('+')
    current_pos = 0
    fig = go.Figure()

    for i, part in enumerate(parts):
        length = float(part)
        color = f"rgba({(i*40)%255}, {(i*70)%255}, {(i*90)%255}, 0.7)" if i > 0 else "rgba(255, 100, 100, 0.9)"
        fig.add_shape(
            type="rect",
            x0=current_pos, x1=current_pos + length,
            y0=0, y1=1,
            line=dict(width=1),
            fillcolor=color
        )
        fig.add_annotation(
            x=current_pos + length / 2, y=0.5,
            text=str(int(length)) if length % 1 == 0 else f"{length:.1f}",
            showarrow=False,
            font=dict(size=10, color="white")
        )
        current_pos += length + cutting_gap

    fig.update_layout(
        height=100,
        margin=dict(l=10, r=10, t=10, b=10),
        xaxis=dict(title="", range=[0, row['Chi·ªÅu D√†i Thanh']]),
        yaxis=dict(visible=False),
        showlegend=False
    )
    
    unique_key = f"plot_{row['S·ªë Thanh']}_{uuid.uuid4()}"
    st.plotly_chart(fig, use_container_width=True, key=unique_key)

# C·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a", layout="wide")
st.title("ü§ñ Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a")

uploaded_file = st.file_uploader("üì§ T·∫£i l√™n t·ªáp Excel d·ªØ li·ªáu", type=["xlsx", "xls"])
if 'result_data' not in st.session_state:
    st.session_state.result_data = None

tab_upload, tab_phu_kien, tab_cat_nhom = st.tabs(["üìÅ T·∫£i M·∫´u Nh·∫≠p", "üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu C·∫Øt Nh√¥m"])

# Tab T·∫£i M·∫´u Nh·∫≠p
with tab_upload:
    st.subheader("üì• T·∫£i xu·ªëng m·∫´u nh·∫≠p li·ªáu")
    # Th√™m ph·∫ßn gi·ªõi thi·ªáu v√† gi·∫£i th√≠ch ch·ª©c nƒÉng
    st.markdown("""
    ### Gi·ªõi thi·ªáu
    Tab **T·∫£i M·∫´u Nh·∫≠p** cung c·∫•p c√°c m·∫´u nh·∫≠p li·ªáu chu·∫©n ƒë·ªÉ b·∫°n s·ª≠ d·ª•ng trong vi·ªác t·ªëi ∆∞u h√≥a c·∫Øt nh√¥m v√† t·ªïng h·ª£p ph·ª• ki·ªán. C√°c m·∫´u n√†y ƒë∆∞·ª£c thi·∫øt k·∫ø v·ªõi ƒë·ªãnh d·∫°ng c·ªë ƒë·ªãnh, gi√∫p ƒë·∫£m b·∫£o d·ªØ li·ªáu ƒë·∫ßu v√†o ch√≠nh x√°c v√† ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa ph·∫ßn m·ªÅm.

    ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
    - **M·∫´u C·∫Øt Nh√¥m**: D√πng ƒë·ªÉ nh·∫≠p d·ªØ li·ªáu c·∫Øt nh√¥m, bao g·ªìm c√°c c·ªôt `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`, v√† `M√£ C·ª≠a` (kh√¥ng b·∫Øt bu·ªôc). M·∫´u n√†y ph√π h·ª£p ƒë·ªÉ chu·∫©n b·ªã d·ªØ li·ªáu cho tab **T·ªëi ∆Øu C·∫Øt Nh√¥m**.
    - **M·∫´u Ph·ª• Ki·ªán**: D√πng ƒë·ªÉ nh·∫≠p danh s√°ch ph·ª• ki·ªán, bao g·ªìm c√°c c·ªôt `M√£ ph·ª• ki·ªán`, `T√™n ph·ª• phi·ªán`, `ƒê∆°n v·ªã t√≠nh`, v√† `S·ªë l∆∞·ª£ng`. M·∫´u n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng trong tab **T·ªïng H·ª£p Ph·ª• Ki·ªán**.
    - **C√°ch s·ª≠ d·ª•ng**:
      1. Nh·∫•n v√†o n√∫t **T·∫£i m·∫´u c·∫Øt nh√¥m** ho·∫∑c **T·∫£i m·∫´u ph·ª• ki·ªán** ƒë·ªÉ t·∫£i file m·∫´u v·ªÅ m√°y.
      2. M·ªü file m·∫´u b·∫±ng ph·∫ßn m·ªÅm Excel, nh·∫≠p d·ªØ li·ªáu theo ƒë√∫ng ƒë·ªãnh d·∫°ng c·ªôt.
      3. L∆∞u file v√† t·∫£i l√™n ·ª©ng d·ª•ng ·ªü c√°c tab t∆∞∆°ng ·ª©ng ƒë·ªÉ x·ª≠ l√Ω.
    """)
    # D·ªØ li·ªáu m·∫´u cho c·∫Øt nh√¥m (gi·ªØ c·ªôt ti·∫øng Vi·ªát)
    nhom_sample = pd.DataFrame({
        'M√£ Thanh': ['TNG1', 'TNG2', 'TNG3', 'TNG4'],
        'Chi·ªÅu D√†i': [2000, 1500, 3000, 2500],
        'S·ªë L∆∞·ª£ng': [2, 5, 3, 4],
        'M√£ C·ª≠a': ['D001', 'D002', 'D003', 'D004']
    })
    out_nhom = io.BytesIO()
    nhom_sample.to_excel(out_nhom, index=False)
    out_nhom.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u c·∫Øt nh√¥m", out_nhom, "mau_cat_nhom.xlsx")

    # D·ªØ li·ªáu m·∫´u cho ph·ª• ki·ªán (gi·ªØ nguy√™n)
    pk_sample = pd.DataFrame({
        'M√£ ph·ª• ki·ªán': ['PK001', 'PK002', 'PK003', 'PK004'],
        'T√™n ph·ª• phi·ªán': ['GioƒÉng', 'Bulong', 'ƒêinh v√≠t', 'Ke g√≥c'],
        'ƒê∆°n v·ªã t√≠nh': ['c√°i', 'b·ªô', 'c√°i', 'b·ªô'],
        'S·ªë l∆∞·ª£ng': [15, 25, 50, 10]
    })
    out_pk = io.BytesIO()
    pk_sample.to_excel(out_pk, index=False)
    out_pk.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u ph·ª• ki·ªán", out_pk, "mau_phu_kien.xlsx")

# Tab T·ªïng H·ª£p Ph·ª• Ki·ªán
with tab_phu_kien:
    st.subheader("üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán")
    if uploaded_file:
        try:
            acc_df = pd.read_excel(uploaded_file)
            output = io.BytesIO()
            summary_df = create_accessory_summary(acc_df, output)
            output.seek(0)
            st.success("‚úÖ T·ªïng h·ª£p th√†nh c√¥ng!")
            st.dataframe(summary_df)
            st.download_button("üì• T·∫£i Xu·ªëng File T·ªïng H·ª£p Ph·ª• Ki·ªán", output, "tong_hop_phu_kien.xlsx")
        except Exception as e:
            st.warning("‚ö†Ô∏è File kh√¥ng ph√π h·ª£p ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt.")

# Tab T·ªëi ∆Øu C·∫Øt Nh√¥m
with tab_cat_nhom:
    st.subheader("‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m")
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file)
            valid, message = validate_input_excel(df)
            if not valid:
                st.error(message)
            else:
                st.success("‚úÖ D·ªØ li·ªáu nh√¥m h·ª£p l·ªá!")
                st.dataframe(df)

                # G·ªôp c√°c tr∆∞·ªùng nh·∫≠p li·ªáu v√†o m·ªôt h√†ng v·ªõi 3 c·ªôt
                col1, col2, col3 = st.columns(3)

                with col1:
                    length_text = st.text_input("Nh·∫≠p k√≠ch th∆∞·ªõc thanh (mm, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)", "5800, 6000, 6200, 6500")

                with col2:
                    cutting_gap = st.number_input("Kho·∫£ng c√°ch c·∫Øt (mm)", 1, 100, 10, 1)

                with col3:
                    optimization_method = st.selectbox("Ph∆∞∆°ng ph√°p t·ªëi ∆∞u", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh", "T·ªëi ∆Øu Linh Ho·∫°t"])

                # N√∫t t·ªëi ∆∞u h√≥a
                if st.button("üöÄ T·ªëi ∆Øu H√≥a"):
                    # Chuy·ªÉn chu·ªói k√≠ch th∆∞·ªõc thanh th√†nh danh s√°ch s·ªë
                    stock_length_options = [int(x.strip()) for x in length_text.split(",") if x.strip().isdigit()]

                    if not stock_length_options:
                        st.error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt k√≠ch th∆∞·ªõc thanh.")
                    else:
                        try:
                            start_time = time.time()
                            result_df, patterns_df, summary_df = optimize_cutting(
                                df,
                                cutting_gap=cutting_gap,
                                optimization_method=optimization_method,
                                stock_length_options=stock_length_options,
                                optimize_stock_length=True
                            )
                            elapsed = time.time() - start_time
                            elapsed_formatted = f"{elapsed:.1f}" if elapsed % 1 != 0 else f"{int(elapsed)}"
                            st.success(f"‚úÖ Ho√†n t·∫•t trong {elapsed_formatted} gi√¢y")
                            st.session_state.result_data = (result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
                        except Exception as opt_err:
                            st.error(f"‚ùå L·ªói t·ªëi ∆∞u h√≥a: {opt_err}")
        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
    if st.session_state.result_data:
        result_df, patterns_df, summary_df, stock_length_options, cutting_gap = st.session_state.result_data

        # ƒê·ªïi t√™n c·ªôt cho b·∫£ng t·ªïng h·ª£p v√† ƒë·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n
        st.subheader("üìä B·∫£ng T·ªïng H·ª£p Hi·ªáu Su·∫•t")
        # ƒê·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n trong b·∫£ng hi·ªÉn th·ªã, hi·ªáu su·∫•t d∆∞·ªõi d·∫°ng ph·∫ßn trƒÉm
        summary_df_display = summary_df.style.format({
            'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ': "{:.1f}%",
            'Hi·ªáu Su·∫•t Trung B√¨nh': "{:.1f}%",
            'Ph·∫ø Li·ªáu (mm)': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}"
        })
        st.dataframe(summary_df_display)

        # ƒê·ªïi t√™n c·ªôt cho b·∫£ng m·∫´u c·∫Øt v√† ƒë·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n
        st.subheader("üìã Danh S√°ch M·∫´u C·∫Øt")
        # ƒê·ªãnh d·∫°ng s·ªë th·∫≠p ph√¢n trong b·∫£ng hi·ªÉn th·ªã, hi·ªáu su·∫•t d∆∞·ªõi d·∫°ng ph·∫ßn trƒÉm
        patterns_df_display = patterns_df.style.format({
            'Hi·ªáu Su·∫•t': "{:.1f}%",
            'Chi·ªÅu D√†i S·ª≠ D·ª•ng': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}",
            'Chi·ªÅu D√†i C√≤n L·∫°i': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}"
        })
        st.dataframe(patterns_df_display)

        # ƒê·ªïi t√™n c·ªôt cho b·∫£ng chi ti·∫øt m·∫£nh c·∫Øt
        result_df = result_df.rename(columns={
            'Item ID': 'M√£ M·∫£nh',
            'Bar Number': 'S·ªë Thanh'
        })
        st.subheader("üìÑ B·∫£ng Chi Ti·∫øt M·∫£nh C·∫Øt")
        st.dataframe(result_df)

        # M√¥ ph·ªèng c·∫Øt thanh
        st.subheader("üìä M√¥ Ph·ªèng C·∫Øt T·ª´ng Thanh")

        # Kh·ªüi t·∫°o bi·∫øn trong session_state n·∫øu ch∆∞a c√≥
        if 'current_profile' not in st.session_state:
            st.session_state.current_profile = None
        if 'page' not in st.session_state:
            st.session_state.page = 0

        # Ch·ªçn m√£ nh√¥m t·ª´ danh s√°ch
        selected_profile = st.selectbox("Ch·ªçn M√£ Thanh", patterns_df['M√£ Thanh'].unique())

        # Ki·ªÉm tra v√† reset trang n·∫øu m√£ nh√¥m thay ƒë·ªïi
        if selected_profile != st.session_state.current_profile:
            st.session_state.current_profile = selected_profile
            st.session_state.page = 0  # Reset v·ªÅ trang 1

        # L·ªçc d·ªØ li·ªáu cho m√£ nh√¥m ƒë∆∞·ª£c ch·ªçn
        filtered = patterns_df[patterns_df['M√£ Thanh'] == selected_profile]

        # Thi·∫øt l·∫≠p ph√¢n trang
        rows_per_page = 5
        total_rows = len(filtered)
        num_pages = (total_rows + rows_per_page - 1) // rows_per_page

        # T√≠nh ch·ªâ s·ªë d√≤ng hi·ªÉn th·ªã
        start_idx = st.session_state.page * rows_per_page
        end_idx = min(start_idx + rows_per_page, total_rows)
        display_rows = filtered.iloc[start_idx:end_idx]

        # Hi·ªÉn th·ªã d·ªØ li·ªáu
        for idx, row in display_rows.iterrows():
            st.markdown(f"**üîπ #{row['S·ªë Thanh']} | {selected_profile} | {int(row['Chi·ªÅu D√†i Thanh'])}mm**")
            display_pattern(row, cutting_gap)

        # ƒêi·ªÅu h∆∞·ªõng trang
        col1, col2 = st.columns(2)
        with col1:
            if st.session_state.page > 0:
                if st.button("Trang tr∆∞·ªõc"):
                    st.session_state.page -= 1
        with col2:
            if st.session_state.page < num_pages - 1:
                if st.button("Trang sau"):
                    st.session_state.page += 1

        # Hi·ªÉn th·ªã th√¥ng tin trang
        st.info(f"ƒêang hi·ªÉn th·ªã trang {st.session_state.page + 1}/{num_pages}")

        # T·∫£i xu·ªëng k·∫øt qu·∫£
        output = io.BytesIO()
        create_output_excel(output, result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
        output.seek(0)
        st.download_button("üì• T·∫£i Xu·ªëng File K·∫øt Qu·∫£ C·∫Øt Nh√¥m", output, "ket_qua_cat_nhom.xlsx")

# Footer
st.markdown("---")
st.markdown("M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Zalo 0977 487 639")
st.markdown("·ª®ng d·ª•ng h·ªó tr·ª£ s·∫£n xu·∫•t c·ª≠a ¬© 2025")
