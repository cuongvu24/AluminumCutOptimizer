import pandas as pd
import streamlit as st
import io
import time
import plotly.graph_objects as go
from cutting_optimizer import optimize_cutting
from utils import create_output_excel, create_accessory_summary, validate_input_excel, save_optimization_history, load_optimization_history, delete_optimization_history_entry
import uuid
from datetime import datetime
import threading
import json

# H√†m hi·ªÉn th·ªã m√¥ ph·ªèng c·∫Øt thanh
def display_pattern(row, cutting_gap):
    pattern = row['M·∫´u C·∫Øt']
    parts = pattern.split('+')
    current_pos = 0
    fig = go.Figure()

    for i, part in enumerate(parts):
        length = float(part)
        color = f"rgba({(i*40)%255}, {(i*70)%255}, {(i*90)%255}, 0.7)" if i > 0 else "rgba(255, 100, 100, 0.9)"
        fig.add_shape(
            type="rect",
            x0=current_pos, x1=current_pos + length,
            y0=0, y1=1,
            line=dict(width=1),
            fillcolor=color
        )
        fig.add_annotation(
            x=current_pos + length / 2, y=0.5,
            text=str(int(length)) if length % 1 == 0 else f"{length:.1f}",
            showarrow=False,
            font=dict(size=10, color="white")
        )
        current_pos += length + cutting_gap

    fig.update_layout(
        height=100,
        margin=dict(l=10, r=10, t=10, b=10),
        xaxis=dict(title="", range=[0, row['Chi·ªÅu D√†i Thanh']]),
        yaxis=dict(visible=False),
        showlegend=False
    )
    
    unique_key = f"plot_{row['S·ªë Thanh']}_{uuid.uuid4()}"
    st.plotly_chart(fig, use_container_width=True, key=unique_key)

# H√†m ƒë·∫øm ng∆∞·ª£c th·ªùi gian
def countdown_placeholder(placeholder, max_time):
    for i in range(max_time, -1, -1):
        placeholder.markdown(f"‚è≥ **ƒêang t·ªëi ∆∞u h√≥a... C√≤n {i} gi√¢y**")
        time.sleep(1)

# C·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a", layout="wide")
st.title("ü§ñ Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a")

# CSS ƒë·ªÉ b·∫£ng v√† th√¥ng b√°o full chi·ªÅu r·ªông
st.markdown("""
<style>
    .stDataFrame, .stAlert {
        width: 100%;
        border: 1px solid #ddd;
        border-radius: 5px;
        overflow-x: auto;
        margin: 10px auto;
        padding: 10px;
    }
    .stDataFrame table {
        width: 100%;
        table-layout: auto;
    }
    .stDataFrame th, .stDataFrame td {
        padding: 8px;
        text-align: left;
    }
    .stAlert > div {
        padding: 10px;
    }
</style>
""", unsafe_allow_html=True)

# Gi·ªõi thi·ªáu ng·∫Øn g·ªçn ngay sau ti√™u ƒë·ªÅ
st.markdown("""
**Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a** l√† c√¥ng c·ª• h·ªó tr·ª£ s·∫£n xu·∫•t c·ª≠a nh√¥m, gi√∫p t·ªëi ∆∞u h√≥a c·∫Øt nh√¥m, qu·∫£n l√Ω ph·ª• ki·ªán, gi·∫£m ph·∫ø li·ªáu v√† tƒÉng hi·ªáu su·∫•t.  
H√£y ch·ªçn tab ph√π h·ª£p ƒë·ªÉ b·∫Øt ƒë·∫ßu! Xem h∆∞·ªõng d·∫´n chi ti·∫øt trong tab **Gi·ªõi Thi·ªáu**.
""")

uploaded_file = st.file_uploader("üì§ T·∫£i l√™n t·ªáp Excel d·ªØ li·ªáu", type=["xlsx", "xls"])
if 'result_data' not in st.session_state:
    st.session_state.result_data = None

# C√°c tab ch√≠nh
tab_intro, tab_upload, tab_phu_kien, tab_cat_nhom = st.tabs(["üìñ Gi·ªõi Thi·ªáu", "üìÅ T·∫£i M·∫´u Nh·∫≠p", "üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu C·∫Øt Nh√¥m"])

# Tab Gi·ªõi Thi·ªáu
with tab_intro:
    st.subheader("üìñ Gi·ªõi Thi·ªáu v√† H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
    st.markdown("""
    ### Gi·ªõi thi·ªáu
    **Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a** l√† m·ªôt c√¥ng c·ª• h·ªó tr·ª£ s·∫£n xu·∫•t c·ª≠a nh√¥m, gi√∫p t·ªëi ∆∞u h√≥a quy tr√¨nh c·∫Øt nh√¥m v√† qu·∫£n l√Ω ph·ª• ki·ªán. ·ª®ng d·ª•ng ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ gi·∫£m thi·ªÉu ph·∫ø li·ªáu, ti·∫øt ki·ªám th·ªùi gian, v√† tƒÉng hi·ªáu qu·∫£ s·∫£n xu·∫•t th√¥ng qua c√°c t√≠nh nƒÉng th√¥ng minh v√† d·ªÖ s·ª≠ d·ª•ng.

    ### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng c√°c ch·ª©c nƒÉng

    #### 1. üìÅ T·∫£i M·∫´u Nh·∫≠p
    - **Ch·ª©c nƒÉng**: Cung c·∫•p c√°c m·∫´u nh·∫≠p li·ªáu chu·∫©n ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p d·ªØ li·ªáu cho vi·ªác t·ªëi ∆∞u h√≥a c·∫Øt nh√¥m v√† t·ªïng h·ª£p ph·ª• ki·ªán.
    - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**:
      1. Nh·∫•n v√†o n√∫t **"T·∫£i m·∫´u c·∫Øt nh√¥m"** ho·∫∑c **"T·∫£i m·∫´u ph·ª• ki·ªán"** ƒë·ªÉ t·∫£i file m·∫´u v·ªÅ m√°y.
      2. M·ªü file m·∫´u b·∫±ng ph·∫ßn m·ªÅm Excel v√† nh·∫≠p d·ªØ li·ªáu theo ƒë√∫ng ƒë·ªãnh d·∫°ng c·ªôt:
         - **M·∫´u C·∫Øt Nh√¥m**: Bao g·ªìm c√°c c·ªôt `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`, `M√£ C·ª≠a` (kh√¥ng b·∫Øt bu·ªôc).
         - **M·∫´u Ph·ª• Ki·ªán**: Bao g·ªìm c√°c c·ªôt `M√£ ph·ª• ki·ªán`, `T√™n ph·ª• phi·ªán`, `ƒê∆°n v·ªã t√≠nh`, `S·ªë l∆∞·ª£ng`.
      3. L∆∞u file v√† s·ª≠ d·ª•ng ·ªü c√°c tab t∆∞∆°ng ·ª©ng (T·ªïng H·ª£p Ph·ª• Ki·ªán ho·∫∑c T·ªëi ∆Øu C·∫Øt Nh√¥m).

    #### 2. üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán
    - **Ch·ª©c nƒÉng**: T·ªïng h·ª£p s·ªë l∆∞·ª£ng ph·ª• ki·ªán c·∫ßn thi·∫øt d·ª±a tr√™n file danh s√°ch ph·ª• ki·ªán m√† ng∆∞·ªùi d√πng t·∫£i l√™n.
    - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**:
      1. T·∫£i file ph·ª• ki·ªán (ƒë√£ nh·∫≠p li·ªáu theo m·∫´u) b·∫±ng c√°ch k√©o th·∫£ ho·∫∑c ch·ªçn file t·ª´ m√°y.
      2. ·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông t·ªïng h·ª£p s·ªë l∆∞·ª£ng theo t·ª´ng lo·∫°i ph·ª• ki·ªán v√† hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£.
      3. Nh·∫•n **"T·∫£i Xu·ªëng File T·ªïng H·ª£p Ph·ª• Ki·ªán"** ƒë·ªÉ l∆∞u k·∫øt qu·∫£ v·ªÅ m√°y d∆∞·ªõi d·∫°ng file Excel.

    #### 3. ‚úÇÔ∏è T·ªëi ∆Øu C·∫Øt Nh√¥m
    - **Ch·ª©c nƒÉng**: T·ªëi ∆∞u h√≥a vi·ªác c·∫Øt nh√¥m ƒë·ªÉ gi·∫£m ph·∫ø li·ªáu v√† tƒÉng hi·ªáu su·∫•t, h·ªó tr·ª£ nhi·ªÅu ph∆∞∆°ng ph√°p t·ªëi ∆∞u v√† t√πy ch·ªânh kho·∫£ng c√°ch c·∫Øt.
    - **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng**:
      1. T·∫£i file c·∫Øt nh√¥m (ƒë√£ nh·∫≠p li·ªáu theo m·∫´u) b·∫±ng c√°ch k√©o th·∫£ ho·∫∑c ch·ªçn file t·ª´ m√°y.
      2. Nh·∫≠p c√°c th√¥ng s·ªë c·∫ßn thi·∫øt:
         - **K√≠ch th∆∞·ªõc thanh**: Nh·∫≠p c√°c k√≠ch th∆∞·ªõc thanh c√≥ s·∫µn (mm), ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y (v√≠ d·ª•: 5800, 6000).
         - **Kho·∫£ng c√°ch c·∫Øt**: Nh·∫≠p kho·∫£ng c√°ch gi·ªØa c√°c m·∫£nh c·∫Øt tr√™n thanh (mm), th∆∞·ªùng do l∆∞·ª°i c·∫Øt t·∫°o ra (m·∫∑c ƒë·ªãnh: 10mm, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh t·ª´ 1-100mm). Kho·∫£ng c√°ch n√†y ·∫£nh h∆∞·ªüng ƒë·∫øn t√≠nh to√°n ph·∫ø li·ªáu v√† hi·ªáu su·∫•t.
         - **Ph∆∞∆°ng ph√°p t·ªëi ∆∞u**:
           - **T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t**: Ch·ªçn k√≠ch th∆∞·ªõc thanh ƒë·ªÉ t·ªëi ƒëa h√≥a hi·ªáu su·∫•t s·ª≠ d·ª•ng nguy√™n li·ªáu.
           - **T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh**: Ch·ªçn k√≠ch th∆∞·ªõc thanh ƒë·ªÉ s·ª≠ d·ª•ng √≠t thanh nh·∫•t.
           - **T·ªëi ∆Øu Linh Ho·∫°t**: S·ª≠ d·ª•ng nhi·ªÅu k√≠ch th∆∞·ªõc thanh ƒë·ªÉ gi·∫£m thi·ªÉu ph·∫ø li·ªáu.
           - **T·ªëi ∆Øu PuLP**: S·ª≠ d·ª•ng l·∫≠p tr√¨nh tuy·∫øn t√≠nh v·ªõi PuLP (chuy·ªÉn sang T·ªëi ∆Øu Linh Ho·∫°t n·∫øu d·ªØ li·ªáu l·ªõn).
      3. Nh·∫•n n√∫t **"T·ªëi ∆Øu H√≥a"** ƒë·ªÉ ch·∫°y t√≠nh to√°n.
      4. Xem k·∫øt qu·∫£:
         - **B·∫£ng T·ªïng H·ª£p Hi·ªáu Su·∫•t**: Hi·ªÉn th·ªã hi·ªáu su·∫•t t·ªïng th·ªÉ, s·ªë l∆∞·ª£ng thanh, v√† ph·∫ø li·ªáu.
         - **Danh S√°ch M·∫´u C·∫Øt**: Hi·ªÉn th·ªã chi ti·∫øt m·∫´u c·∫Øt cho t·ª´ng thanh.
         - **B·∫£ng Chi Ti·∫øt M·∫£nh C·∫Øt**: Hi·ªÉn th·ªã th√¥ng tin t·ª´ng m·∫£nh c·∫Øt.
         - **M√¥ Ph·ªèng C·∫Øt T·ª´ng Thanh**: Hi·ªÉn th·ªã tr·ª±c quan c√°ch c·∫Øt t·ª´ng thanh.
         - **L·ªãch S·ª≠ T·ªëi ∆Øu H√≥a**: Xem, ƒë·ªïi t√™n, ho·∫∑c x√≥a c√°c l·∫ßn t·ªëi ∆∞u h√≥a tr∆∞·ªõc.
      5. Nh·∫•n **"T·∫£i Xu·ªëng File K·∫øt Qu·∫£ C·∫Øt Nh√¥m"** ƒë·ªÉ l∆∞u k·∫øt qu·∫£.

    ### L∆∞u √Ω khi s·ª≠ d·ª•ng
    - ƒê·∫£m b·∫£o file nh·∫≠p li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng theo m·∫´u.
    - K√≠ch th∆∞·ªõc thanh v√† kho·∫£ng c√°ch c·∫Øt ph·∫£i l√† s·ªë d∆∞∆°ng.
    - Ph∆∞∆°ng ph√°p "T·ªëi ∆Øu PuLP" s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang "T·ªëi ∆Øu Linh Ho·∫°t" n·∫øu d·ªØ li·ªáu qu√° l·ªõn (>100 m·ª•c m·ªói m√£ thanh).
    """)

# Tab T·∫£i M·∫´u Nh·∫≠p
with tab_upload:
    st.subheader("üì• T·∫£i xu·ªëng m·∫´u nh·∫≠p li·ªáu")
    st.markdown("""
    üëâ Vui l√≤ng s·ª≠ d·ª•ng c√°c m·∫´u b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ch√≠nh x√°c:
    - **M·∫´u C·∫Øt Nh√¥m**: `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`, `M√£ C·ª≠a` (kh√¥ng b·∫Øt bu·ªôc)
    - **M·∫´u Ph·ª• Ki·ªán**: `M√£ ph·ª• ki·ªán`, `T√™n ph·ª• phi·ªán`, `ƒê∆°n v·ªã t√≠nh`, `S·ªë l∆∞·ª£ng`
    """)
    nhom_sample = pd.DataFrame({
        'M√£ Thanh': ['TNG1', 'TNG2', 'TNG3', 'TNG4'],
        'Chi·ªÅu D√†i': [2000, 1500, 3000, 2500],
        'S·ªë L∆∞·ª£ng': [2, 5, 3, 4],
        'M√£ C·ª≠a': ['D001', 'D002', 'D003', 'D004']
    })
    out_nhom = io.BytesIO()
    nhom_sample.to_excel(out_nhom, index=False)
    out_nhom.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u c·∫Øt nh√¥m", out_nhom, "mau_cat_nhom.xlsx")

    pk_sample = pd.DataFrame({
        'M√£ ph·ª• ki·ªán': ['PK001', 'PK002', 'PK003', 'PK004'],
        'T√™n ph·ª• phi·ªán': ['GioƒÉng', 'Bulong', 'ƒêinh v√≠t', 'Ke g√≥c'],
        'ƒê∆°n v·ªã t√≠nh': ['c√°i', 'b·ªô', 'c√°i', 'b·ªô'],
        'S·ªë l∆∞·ª£ng': [15, 25, 50, 10]
    })
    out_pk = io.BytesIO()
    pk_sample.to_excel(out_pk, index=False)
    out_pk.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u ph·ª• ki·ªán", out_pk, "mau_phu_kien.xlsx")

# Tab T·ªïng H·ª£p Ph·ª• Ki·ªán
with tab_phu_kien:
    st.subheader("üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán")
    if uploaded_file:
        try:
            acc_df = pd.read_excel(uploaded_file)
            output = io.BytesIO()
            summary_df = create_accessory_summary(acc_df, output)
            output.seek(0)
            st.success("‚úÖ T·ªïng h·ª£p th√†nh c√¥ng!")
            st.dataframe(summary_df, use_container_width=True)
            st.download_button("üì• T·∫£i Xu·ªëng File T·ªïng H·ª£p Ph·ª• Ki·ªán", output, "tong_hop_phu_kien.xlsx")
        except Exception as e:
            st.warning("‚ö†Ô∏è File kh√¥ng ph√π h·ª£p ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt.")

# Tab T·ªëi ∆Øu C·∫Øt Nh√¥m
with tab_cat_nhom:
    st.subheader("‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m")
    
    # T·∫°o sub-tabs trong T·ªëi ∆Øu C·∫Øt Nh√¥m
    subtab_new, subtab_history = st.tabs(["T·ªëi ∆Øu H√≥a M·ªõi", "L·ªãch S·ª≠ T·ªëi ∆Øu H√≥a"])
    
    # Sub-tab L·ªãch S·ª≠ T·ªëi ∆Øu H√≥a
    with subtab_history:
        st.markdown("### üìú L·ªãch S·ª≠ T·ªëi ∆Øu H√≥a")
        history_data = load_optimization_history()
        if history_data:
            # T·∫°o b·∫£ng l·ªãch s·ª≠ kh√¥ng c√≥ c·ªôt STT
            history_df = pd.DataFrame([
                {
                    'T√™n': entry.get('name', entry['timestamp']),
                    'Th·ªùi Gian': entry['timestamp'],
                    'Ph∆∞∆°ng Ph√°p T·ªëi ∆Øu': entry['optimization_method'],
                    'M√£ Thanh': ', '.join(entry['profile_codes']),
                    'K√≠ch Th∆∞·ªõc Thanh': ', '.join(map(str, entry['stock_length_options'])),
                    'Kho·∫£ng C√°ch C·∫Øt': entry['cutting_gap']
                }
                for entry in history_data
            ])
            st.dataframe(history_df, use_container_width=True)
            
            # Ch·ªçn l·ªãch s·ª≠ b·∫±ng t√™n
            history_names = [''] + [entry.get('name', entry['timestamp']) for entry in history_data]
            selected_history_name = st.selectbox("Ch·ªçn l·ªãch s·ª≠ ƒë·ªÉ xem chi ti·∫øt", history_names)
            if selected_history_name:
                # T√¨m entry d·ª±a tr√™n t√™n
                selected_entry = next((entry for entry in history_data if entry.get('name', entry['timestamp']) == selected_history_name), None)
                if selected_entry:
                    result_df = pd.DataFrame(selected_entry['result_df'])
                    patterns_df = pd.DataFrame(selected_entry['patterns_df'])
                    summary_df = pd.DataFrame(selected_entry['summary_df'])
                    stock_length_options = selected_entry['stock_length_options']
                    cutting_gap = selected_entry['cutting_gap']
                    
                    # Cho ph√©p ch·ªânh s·ª≠a t√™n l·ªãch s·ª≠
                    current_name = selected_entry.get('name', selected_entry['timestamp'])
                    new_name = st.text_input("ƒê·∫∑t t√™n cho l·ªãch s·ª≠ n√†y", value=current_name, key=f"name_{selected_entry['id']}")
                    if new_name != current_name:
                        history_data = [entry for entry in history_data if entry['id'] != selected_entry['id']]
                        selected_entry['name'] = new_name
                        with open("history.json", 'w', encoding='utf-8') as f:
                            json.dump(history_data, f, ensure_ascii=False, indent=2)
                        st.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t t√™n l·ªãch s·ª≠!")
                        st.rerun()  # L√†m m·ªõi giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã t√™n m·ªõi
                    
                    st.markdown("#### K·∫øt Qu·∫£ L·ªãch S·ª≠")
                    st.subheader("üìä B·∫£ng T·ªïng H·ª£p Hi·ªáu Su·∫•t")
                    summary_df_display = summary_df.style.format({
                        'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ': "{:.1f}%",
                        'Hi·ªáu Su·∫•t Trung B√¨nh': "{:.1f}%",
                        'Ph·∫ø Li·ªáu (mm)': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}"
                    })
                    st.dataframe(summary_df_display, use_container_width=True)

                    st.subheader("üìã Danh S√°ch M·∫´u C·∫Øt")
                    patterns_df_display = patterns_df.style.format({
                        'Hi·ªáu Su·∫•t': "{:.1f}%",
                        'Chi·ªÅu D√†i S·ª≠ D·ª•ng': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}",
                        'Chi·ªÅu D√†i C√≤n L·∫°i': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}"
                    })
                    st.dataframe(patterns_df_display, use_container_width=True)

                    st.subheader("üìÑ B·∫£ng Chi Ti·∫øt M·∫£nh C·∫Øt")
                    result_df = result_df.rename(columns={'Item ID': 'M√£ M·∫£nh', 'Bar Number': 'S·ªë Thanh'})
                    st.dataframe(result_df, use_container_width=True)

                    st.subheader("üìä M√¥ Ph·ªèng C·∫Øt T·ª´ng Thanh")
                    selected_profile = st.selectbox("Ch·ªçn M√£ Thanh", patterns_df['M√£ Thanh'].unique(), key=f"history_profile_{selected_entry['id']}")
                    filtered = patterns_df[patterns_df['M√£ Thanh'] == selected_profile]
                    rows_per_page = 5
                    total_rows = len(filtered)
                    num_pages = (total_rows + rows_per_page - 1) // rows_per_page
                    page_key = f"history_page_{selected_entry['id']}"
                    if page_key not in st.session_state:
                        st.session_state[page_key] = 0

                    start_idx = st.session_state[page_key] * rows_per_page
                    end_idx = min(start_idx + rows_per_page, total_rows)
                    display_rows = filtered.iloc[start_idx:end_idx]

                    for idx, row in display_rows.iterrows():
                        st.markdown(f"**üîπ #{row['S·ªë Thanh']} | {selected_profile} | {int(row['Chi·ªÅu D√†i Thanh'])}mm**")
                        display_pattern(row, cutting_gap)

                    col1, col2 = st.columns(2)
                    with col1:
                        if st.session_state[page_key] > 0:
                            if st.button("Trang tr∆∞·ªõc", key=f"prev_{selected_entry['id']}"):
                                st.session_state[page_key] -= 1
                    with col2:
                        if st.session_state[page_key] < num_pages - 1:
                            if st.button("Trang sau", key=f"next_{selected_entry['id']}"):
                                st.session_state[page_key] += 1

                    st.info(f"ƒêang hi·ªÉn th·ªã trang {st.session_state[page_key] + 1}/{num_pages}")

                    # T·∫£i xu·ªëng k·∫øt qu·∫£ l·ªãch s·ª≠
                    output = io.BytesIO()
                    create_output_excel(output, result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
                    output.seek(0)
                    st.download_button("üì• T·∫£i Xu·ªëng K·∫øt Qu·∫£ L·ªãch S·ª≠", output, f"ket_qua_cat_nhom_{selected_entry['timestamp'].replace(':', '-')}.xlsx")
                    
                    # N√∫t x√≥a l·ªãch s·ª≠
                    if st.button("üóëÔ∏è X√≥a L·ªãch S·ª≠ N√†y"):
                        delete_optimization_history_entry(selected_entry['id'])
                        st.success("‚úÖ ƒê√£ x√≥a l·ªãch s·ª≠!")
                        st.rerun()
        else:
            st.info("‚ÑπÔ∏è Ch∆∞a c√≥ l·ªãch s·ª≠ t·ªëi ∆∞u h√≥a.")

    # Sub-tab T·ªëi ∆Øu H√≥a M·ªõi
    with subtab_new:
        st.markdown("### ‚úÇÔ∏è T·ªëi ∆Øu H√≥a M·ªõi")
        if uploaded_file:
            try:
                df = pd.read_excel(uploaded_file)
                valid, message = validate_input_excel(df)
                if not valid:
                    st.error(message)
                else:
                    st.success("‚úÖ D·ªØ li·ªáu nh√¥m h·ª£p l·ªá!")
                    st.dataframe(df, use_container_width=True)

                    col1, col2, col3 = st.columns(3)

                    with col1:
                        length_text = st.text_input("Nh·∫≠p k√≠ch th∆∞·ªõc thanh (mm, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)", "5800, 6000, 6200, 6500")

                    with col2:
                        cutting_gap = st.number_input("Kho·∫£ng c√°ch c·∫Øt (mm)", 1, 100, 10, 1)

                    with col3:
                        optimization_method = st.selectbox("Ph∆∞∆°ng ph√°p t·ªëi ∆∞u", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh", "T·ªëi ∆Øu Linh Ho·∫°t", "T·ªëi ∆Øu PuLP"])

                    # Th√™m tr∆∞·ªùng nh·∫≠p t√™n cho l·∫ßn t·ªëi ∆∞u h√≥a
                    history_name = st.text_input("T√™n cho l·∫ßn t·ªëi ∆∞u h√≥a n√†y", value=f"T·ªëi ∆∞u h√≥a {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

                    # N√∫t t·ªëi ∆∞u h√≥a
                    if st.button("üöÄ T·ªëi ∆Øu H√≥a"):
                        stock_length_options = [int(x.strip()) for x in length_text.split(",") if x.strip().isdigit()]

                        if not stock_length_options:
                            st.error("Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt k√≠ch th∆∞·ªõc thanh.")
                        else:
                            try:
                                start_time = time.time()
                                max_time = 30  # Th·ªùi gian t·ªëi ƒëa 30 gi√¢y
                                placeholder = st.empty()
                                countdown_thread = threading.Thread(target=countdown_placeholder, args=(placeholder, max_time))
                                countdown_thread.start()

                                result_df, patterns_df, summary_df = optimize_cutting(
                                    df,
                                    cutting_gap=cutting_gap,
                                    optimization_method=optimization_method,
                                    stock_length_options=stock_length_options,
                                    optimize_stock_length=True
                                )

                                countdown_thread.join()
                                placeholder.empty()
                                elapsed = time.time() - start_time
                                elapsed_formatted = f"{elapsed:.1f}" if elapsed % 1 != 0 else f"{int(elapsed)}"
                                st.success(f"‚úÖ Ho√†n t·∫•t trong {elapsed_formatted} gi√¢y")
                                st.session_state.result_data = (result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
                                
                                # L∆∞u v√†o l·ªãch s·ª≠ v·ªõi t√™n
                                save_optimization_history(
                                    result_df, patterns_df, summary_df, stock_length_options, cutting_gap, optimization_method, name=history_name
                                )
                                st.rerun()  # L√†m m·ªõi giao di·ªán ƒë·ªÉ hi·ªÉn th·ªã l·ªãch s·ª≠ m·ªõi
                            except Exception as opt_err:
                                placeholder.empty()
                                st.error(f"‚ùå L·ªói t·ªëi ∆∞u h√≥a: {opt_err}")
            except Exception as e:
                st.error(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")
        else:
            st.info("Vui l√≤ng t·∫£i l√™n t·ªáp Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a.")

        # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
        if st.session_state.result_data:
            result_df, patterns_df, summary_df, stock_length_options, cutting_gap = st.session_state.result_data

            st.subheader("üìä B·∫£ng T·ªïng H·ª£p Hi·ªáu Su·∫•t")
            summary_df_display = summary_df.style.format({
                'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ': "{:.1f}%",
                'Hi·ªáu Su·∫•t Trung B√¨nh': "{:.1f}%",
                'Ph·∫ø Li·ªáu (mm)': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}"
            })
            st.dataframe(summary_df_display, use_container_width=True)

            st.subheader("üìã Danh S√°ch M·∫´u C·∫Øt")
            patterns_df_display = patterns_df.style.format({
                'Hi·ªáu Su·∫•t': "{:.1f}%",
                'Chi·ªÅu D√†i S·ª≠ D·ª•ng': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}",
                'Chi·ªÅu D√†i C√≤n L·∫°i': lambda x: f"{x:.1f}" if isinstance(x, float) and x % 1 != 0 else f"{int(x)}"
            })
            st.dataframe(patterns_df_display, use_container_width=True)

            st.subheader("üìÑ B·∫£ng Chi Ti·∫øt M·∫£nh C·∫Øt")
            result_df = result_df.rename(columns={
                'Item ID': 'M√£ M·∫£nh',
                'Bar Number': 'S·ªë Thanh'
            })
            st.dataframe(result_df, use_container_width=True)

            st.subheader("üìä M√¥ Ph·ªèng C·∫Øt T·ª´ng Thanh")
            if 'current_profile' not in st.session_state:
                st.session_state.current_profile = None
            if 'page' not in st.session_state:
                st.session_state.page = 0

            selected_profile = st.selectbox("Ch·ªçn M√£ Thanh", patterns_df['M√£ Thanh'].unique())
            if selected_profile != st.session_state.current_profile:
                st.session_state.current_profile = selected_profile
                st.session_state.page = 0

            filtered = patterns_df[patterns_df['M√£ Thanh'] == selected_profile]
            rows_per_page = 5
            total_rows = len(filtered)
            num_pages = (total_rows + rows_per_page - 1) // rows_per_page

            start_idx = st.session_state.page * rows_per_page
            end_idx = min(start_idx + rows_per_page, total_rows)
            display_rows = filtered.iloc[start_idx:end_idx]

            for idx, row in display_rows.iterrows():
                st.markdown(f"**üîπ #{row['S·ªë Thanh']} | {selected_profile} | {int(row['Chi·ªÅu D√†i Thanh'])}mm**")
                display_pattern(row, cutting_gap)

            col1, col2 = st.columns(2)
            with col1:
                if st.session_state.page > 0:
                    if st.button("Trang tr∆∞·ªõc"):
                        st.session_state.page -= 1
            with col2:
                if st.session_state.page < num_pages - 1:
                    if st.button("Trang sau"):
                        st.session_state.page += 1

            st.info(f"ƒêang hi·ªÉn th·ªã trang {st.session_state.page + 1}/{num_pages}")

            # T·∫£i xu·ªëng k·∫øt qu·∫£
            output = io.BytesIO()
            create_output_excel(output, result_df, patterns_df, summary_df, stock_length_options, cutting_gap)
            output.seek(0)
            st.download_button("üì• T·∫£i Xu·ªëng File K·∫øt Qu·∫£ C·∫Øt Nh√¥m", output, "ket_qua_cat_nhom.xlsx")

# Footer
st.markdown("---")
st.markdown("M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Zalo 0977 487 639")
st.markdown("·ª®ng d·ª•ng h·ªó tr·ª£ s·∫£n xu·∫•t c·ª≠a ¬© 2025")
