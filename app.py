import pandas as pd
import streamlit as st
import io
import time
from cutting_optimizer import optimize_cutting
from utils import create_output_excel, create_accessory_summary, validate_input_excel

st.set_page_config(page_title="Ph·∫ßn m·ªÅm T·ªëi ∆Øu Nh√¥m & Ph·ª• Ki·ªán", layout="wide")
st.title("üîß ·ª®ng D·ª•ng T·ªëi ∆Øu C·∫Øt Nh√¥m & T·ªïng H·ª£p Ph·ª• Ki·ªán")

uploaded_file = st.file_uploader("üì§ T·∫£i l√™n t·ªáp Excel d·ªØ li·ªáu", type=["xlsx", "xls"])

tab_upload, tab1, tab2 = st.tabs(["üìÅ T·∫£i M·∫´u Nh·∫≠p", "üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu C·∫Øt Nh√¥m"])

with tab_upload:
    st.subheader("üì• T·∫£i xu·ªëng m·∫´u nh·∫≠p li·ªáu")
    st.markdown("""
    üëâ Vui l√≤ng s·ª≠ d·ª•ng c√°c m·∫´u b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ch√≠nh x√°c khi nh·∫≠p li·ªáu:

    - **M·∫´u C·∫Øt Nh√¥m** g·ªìm c√°c c·ªôt: `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`
    - **M·∫´u Ph·ª• Ki·ªán** g·ªìm c√°c c·ªôt: `m√£ ph·ª• ki·ªán`, `t√™n ph·ª• phi·ªán`, `ƒë∆°n v·ªã t√≠nh`, `m√£ h√†ng`, `s·ªë l∆∞·ª£ng`
    """)

    # M·∫´u c·∫Øt nh√¥m
    nhom_sample = pd.DataFrame({
        'Profile Code': ['ABC', 'ABC'],
        'Length': [1000, 1200],
        'Quantity': [3, 4]
    })
    out_nhom = io.BytesIO()
    nhom_sample.to_excel(out_nhom, index=False)
    out_nhom.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u c·∫Øt nh√¥m", out_nhom, "mau_cat_nhom.xlsx")

    # M·∫´u ph·ª• ki·ªán
    pk_sample = pd.DataFrame({
        'm√£ ph·ª• ki·ªán': ['PK001', 'PK002'],
        't√™n ph·ª• phi·ªán': ['GioƒÉng', 'Bulong'],
        'ƒë∆°n v·ªã t√≠nh': ['c√°i', 'b·ªô'],
        'm√£ h√†ng': ['NHOM1', 'NHOM2'],
        's·ªë l∆∞·ª£ng': [10, 20]
    })
    out_pk = io.BytesIO()
    pk_sample.to_excel(out_pk, index=False)
    out_pk.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u ph·ª• ki·ªán", out_pk, "mau_phu_kien.xlsx")

with tab1:
    st.subheader("üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán")
    if uploaded_file:
        try:
            acc_df = pd.read_excel(uploaded_file)
            output = io.BytesIO()
            summary_df = create_accessory_summary(acc_df, output)
            output.seek(0)
            st.success("‚úÖ T·ªïng h·ª£p th√†nh c√¥ng!")
            
            summary_df = summary_df.rename(columns={
                            'Profile Code': 'M√£ Thanh',
                            'Total Pieces': 'T·ªïng ƒêo·∫°n C·∫Øt',
                            'Total Bars Used': 'S·ªë Thanh S·ª≠ D·ª•ng',
                            'Total Length Needed (mm)': 'T·ªïng Chi·ªÅu D√†i C·∫ßn (mm)',
                            'Total Stock Length (mm)': 'T·ªïng Chi·ªÅu D√†i Nguy√™n Li·ªáu (mm)',
                            'Waste (mm)': 'Ph·∫ø Li·ªáu (mm)',
                            'Overall Efficiency': 'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ',
                            'Average Bar Efficiency': 'Hi·ªáu Su·∫•t Trung B√¨nh'
                        })
            st.dataframe(summary_df)
            patterns_df = patterns_df.rename(columns={
                            'Profile Code': 'M√£ Thanh',
                            'Bar Number': 'S·ªë Thanh',
                            'Stock Length': 'Chi·ªÅu D√†i Thanh',
                            'Used Length': 'Chi·ªÅu D√†i S·ª≠ D·ª•ng',
                            'Remaining Length': 'Chi·ªÅu D√†i C√≤n L·∫°i',
                            'Efficiency': 'Hi·ªáu Su·∫•t',
                            'Cutting Pattern': 'M·∫´u C·∫Øt',
                            'Pieces': 'S·ªë ƒêo·∫°n C·∫Øt'
                        })
                        st.subheader("üìã Danh S√°ch M·∫´u C·∫Øt")
                        st.dataframe(patterns_df)

                        
                        st.subheader("üìÑ B·∫£ng Chi Ti·∫øt M·∫£nh C·∫Øt")
                        result_df = result_df.rename(columns={
                            'Profile Code': 'M√£ Thanh',
                            'Item ID': 'M√£ M·∫£nh',
                            'Length': 'Chi·ªÅu D√†i',
                            'Bar Number': 'S·ªë Thanh'
                        })
                        st.dataframe(result_df)
st.subheader("üìä Chi Ti·∫øt C·∫Øt T·ª´ng Thanh")
                        for i, row in patterns_df.iterrows():
                            st.markdown(f"**üîπ Thanh #{int(row['S·ªë Thanh'])} | M√£: {row['M√£ Thanh']} | D√†i: {row['Chi·ªÅu D√†i Thanh']}mm**")
                            cuts = row['M·∫´u C·∫Øt'].split('+')
                            df_cut = pd.DataFrame({'ƒêo·∫°n C·∫Øt (mm)': cuts})
                            st.dataframe(df_cut, use_container_width=True)

            st.download_button(
                "üì• T·∫£i Xu·ªëng File T·ªïng H·ª£p Ph·ª• Ki·ªán",
                output,
                "tong_hop_phu_kien.xlsx"
            )
        except Exception as e:
            st.warning("‚ö†Ô∏è File kh√¥ng ph√π h·ª£p ho·∫∑c thi·∫øu c·ªôt c·∫ßn thi·∫øt.")

with tab2:
    st.subheader("‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m")
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file)
            valid, message = validate_input_excel(df)
            if not valid:
                st.error(message)
            else:
                st.success("‚úÖ D·ªØ li·ªáu nh√¥m h·ª£p l·ªá!")
                st.dataframe(df)

                stock_length = st.number_input("Chi·ªÅu D√†i Ti√™u Chu·∫©n (mm)", 1000, 10000, 6000, 100)
                cutting_gap = st.number_input("Kho·∫£ng C√°ch C·∫Øt (mm)", 1, 100, 10, 1)
                optimization_method = st.selectbox("Ph∆∞∆°ng Ph√°p T·ªëi ∆Øu", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh"])
                length_text = st.text_input("Nh·∫≠p c√°c k√≠ch th∆∞·ªõc thanh (ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y)", "5800, 6000, 6200, 6500")

                if st.button("üöÄ T·ªëi ∆Øu H√≥a"):
                    try:
                        stock_length_options = [int(x.strip()) for x in length_text.split(",") if x.strip().isdigit()]
                        start_time = time.time()
                        result_df, patterns_df, summary_df = optimize_cutting(
                            df,
                            stock_length=stock_length,
                            cutting_gap=cutting_gap,
                            optimization_method=optimization_method,
                            stock_length_options=stock_length_options,
                            optimize_stock_length=True
                        )
                        elapsed = time.time() - start_time
                        st.success(f"‚úÖ Ho√†n t·∫•t trong {elapsed:.2f} gi√¢y")
                        st.dataframe(summary_df)

                        output = io.BytesIO()
                        create_output_excel(output, result_df, patterns_df, summary_df, stock_length, cutting_gap)
                        output.seek(0)
                        st.download_button(
                            "üì• T·∫£i Xu·ªëng File K·∫øt Qu·∫£ C·∫Øt Nh√¥m",
                            output,
                            "ket_qua_cat_nhom.xlsx"
                        )
                    except Exception as opt_err:
                        st.error(f"‚ùå L·ªói t·ªëi ∆∞u h√≥a: {opt_err}")
        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")

# Footer
st.markdown("---")
st.markdown("Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m ¬© 2025 By C∆∞·ªùng V≈©")
st.markdown("M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Zalo 0977 487 639")
