import pandas as pd
import streamlit as st
import io
import time
import plotly.graph_objects as go
from cutting_optimizer import optimize_cutting
from utils import (
    create_output_excel,
    create_accessory_summary,
    validate_input_excel,
    save_optimization_history,
    load_optimization_history,
    delete_optimization_history_entry
)
import uuid
from datetime import datetime

# ============== H√†m m√¥ ph·ªèng c·∫Øt thanh ==============
def display_pattern(row, cutting_gap):
    pattern = row['M·∫´u C·∫Øt']
    parts = pattern.split('+')
    current_pos = 0
    fig = go.Figure()

    for i, part in enumerate(parts):
        length = float(part)
        color = f"rgba({(i*40)%255}, {(i*70)%255}, {(i*90)%255}, 0.7)" if i > 0 else "rgba(255, 100, 100, 0.9)"
        fig.add_shape(
            type="rect",
            x0=current_pos, x1=current_pos + length,
            y0=0, y1=1,
            line=dict(width=1),
            fillcolor=color
        )
        fig.add_annotation(
            x=current_pos + length / 2, y=0.5,
            text=str(int(length)) if length % 1 == 0 else f"{length:.1f}",
            showarrow=False,
            font=dict(size=10, color="white")
        )
        current_pos += length + cutting_gap

    fig.update_layout(
        height=100,
        margin=dict(l=10, r=10, t=10, b=10),
        xaxis=dict(title="", range=[0, row['Chi·ªÅu D√†i Thanh']]),
        yaxis=dict(visible=False),
        showlegend=False
    )
    unique_key = f"plot_{row['S·ªë Thanh']}_{uuid.uuid4()}"
    st.plotly_chart(fig, use_container_width=True, key=unique_key)

# ============== C√†i ƒë·∫∑t trang ==============
st.set_page_config(page_title="Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a", layout="wide")
st.title("ü§ñ Ph·∫ßn m·ªÅm H·ªó Tr·ª£ S·∫£n Xu·∫•t C·ª≠a")

uploaded_file = st.file_uploader("üì§ T·∫£i t·ªáp Excel", type=["xlsx", "xls"])

if 'result_data' not in st.session_state:
    st.session_state.result_data = None

tab_intro, tab_upload, tab_pk, tab_cut = st.tabs(
    ["üìñ Gi·ªõi Thi·ªáu", "üìÅ T·∫£i M·∫´u", "üì¶ Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu C·∫Øt"]
)

# ============== Tab Gi·ªõi Thi·ªáu ==============
with tab_intro:
    st.subheader("üìñ Gi·ªõi Thi·ªáu v√† H∆∞·ªõng D·∫´n S·ª≠ D·ª•ng")
    st.markdown("""
    **·ª®ng d·ª•ng h·ªó tr·ª£ t·ªëi ∆∞u c·∫Øt nh√¥m v√† t·ªïng h·ª£p ph·ª• ki·ªán, gi√∫p gi·∫£m ph·∫ø li·ªáu, ti·∫øt ki·ªám th·ªùi gian v√† chi ph√≠.**  
    üëâ Ch·ªçn tab **T·∫£i M·∫´u** ƒë·ªÉ t·∫£i file m·∫´u, ƒëi·ªÅn d·ªØ li·ªáu ƒë√∫ng ƒë·ªãnh d·∫°ng r·ªìi quay l·∫°i tab **T·ªïng H·ª£p Ph·ª• Ki·ªán** ho·∫∑c **T·ªëi ∆Øu C·∫Øt** ƒë·ªÉ ch·∫°y t√≠nh to√°n.
    """)

# ============== Tab T·∫£i M·∫´u ==============
with tab_upload:
    st.header("üìÅ T·∫£i M·∫´u Nh·∫≠p")
    st.markdown("""
    üëâ **M·∫´u nh·∫≠p chu·∫©n:**
    - **C·∫Øt Nh√¥m**: `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`, `M√£ C·ª≠a` *(t√πy ch·ªçn)*
    - **Ph·ª• Ki·ªán**: `M√£ ph·ª• ki·ªán`, `T√™n ph·ª• phi·ªán`, `ƒê∆°n v·ªã t√≠nh`, `S·ªë l∆∞·ª£ng`
    """)

    nhom_sample = pd.DataFrame({
        'M√£ Thanh': ['TNG1'],
        'Chi·ªÅu D√†i': [2000],
        'S·ªë L∆∞·ª£ng': [2],
        'M√£ C·ª≠a': ['D001']
    })
    out1 = io.BytesIO()
    nhom_sample.to_excel(out1, index=False)
    out1.seek(0)
    st.download_button("üìÑ M·∫´u C·∫Øt Nh√¥m", out1, "mau_cat_nhom.xlsx")

    pk_sample = pd.DataFrame({
        'M√£ ph·ª• ki·ªán': ['PK001'],
        'T√™n ph·ª• phi·ªán': ['GioƒÉng'],
        'ƒê∆°n v·ªã t√≠nh': ['c√°i'],
        'S·ªë l∆∞·ª£ng': [10]
    })
    out2 = io.BytesIO()
    pk_sample.to_excel(out2, index=False)
    out2.seek(0)
    st.download_button("üìÑ M·∫´u Ph·ª• Ki·ªán", out2, "mau_phu_kien.xlsx")

# ============== Tab T·ªïng H·ª£p Ph·ª• Ki·ªán ==============
with tab_pk:
    st.header("üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán")
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file)
            output = io.BytesIO()
            summary = create_accessory_summary(df, output)
            output.seek(0)
            st.success("‚úÖ T·ªïng h·ª£p th√†nh c√¥ng!")
            st.dataframe(summary)
            st.download_button("üì• T·∫£i File Ph·ª• Ki·ªán", output, "tong_hop_phu_kien.xlsx")
        except Exception as e:
            st.warning(f"‚ö†Ô∏è L·ªói: {e}")

# ============== Tab T·ªëi ∆Øu C·∫Øt Nh√¥m ==============
with tab_cut:
    st.header("‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m")
    if uploaded_file:
        try:
            df = pd.read_excel(uploaded_file)
            valid, msg = validate_input_excel(df)
            if not valid:
                st.error(msg)
            else:
                st.success("‚úÖ File c·∫Øt nh√¥m h·ª£p l·ªá.")
                st.dataframe(df)

                col1, col2, col3 = st.columns(3)
                with col1:
                    lengths_text = st.text_input("K√≠ch Th∆∞·ªõc Thanh (mm, ph·∫©y)", "5800, 6000")
                with col2:
                    gap = st.number_input("Kho·∫£ng C√°ch C·∫Øt (mm)", 1, 100, 10, 1)
                with col3:
                    method = st.selectbox("Ph∆∞∆°ng Ph√°p T·ªëi ∆Øu", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh"])

                if st.button("üöÄ T·ªëi ∆Øu H√≥a"):
                    stock_lengths = [int(x.strip()) for x in lengths_text.split(',') if x.strip().isdigit()]
                    if not stock_lengths:
                        st.error("Nh·∫≠p √≠t nh·∫•t 1 k√≠ch th∆∞·ªõc.")
                    else:
                        try:
                            start = time.time()
                            result_df, patterns_df, summary_df = optimize_cutting(
                                df,
                                stock_length=stock_lengths[0],
                                cutting_gap=gap,
                                stock_length_options=stock_lengths,
                                optimize_stock_length=True
                            )

                            # ‚úÖ Rename c·ªôt cho ƒë·ªìng nh·∫•t
                            patterns_df = patterns_df.rename(columns={
                                'Profile Code': 'M√£ Thanh',
                                'Bar Number': 'S·ªë Thanh',
                                'Stock Length': 'Chi·ªÅu D√†i Thanh',
                                'Used Length': 'Chi·ªÅu D√†i S·ª≠ D·ª•ng',
                                'Remaining Length': 'Chi·ªÅu D√†i C√≤n L·∫°i',
                                'Efficiency': 'Hi·ªáu Su·∫•t',
                                'Cutting Pattern': 'M·∫´u C·∫Øt',
                                'Pieces': 'S·ªë M·∫£nh'
                            })
                            result_df = result_df.rename(columns={
                                'Profile Code': 'M√£ Thanh',
                                'Item ID': 'M√£ M·∫£nh',
                                'Bar Number': 'S·ªë Thanh'
                            })
                            summary_df = summary_df.rename(columns={
                                'Profile Code': 'M√£ Thanh',
                                'Total Pieces': 'T·ªïng S·ªë ƒêo·∫°n',
                                'Total Bars Used': 'T·ªïng Thanh S·ª≠ D·ª•ng',
                                'Total Length Needed (mm)': 'T·ªïng Chi·ªÅu D√†i C·∫ßn (mm)',
                                'Total Stock Length (mm)': 'T·ªïng Chi·ªÅu D√†i Nguy√™n Li·ªáu (mm)',
                                'Waste (mm)': 'Ph·∫ø Li·ªáu (mm)',
                                'Overall Efficiency': 'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ',
                                'Average Bar Efficiency': 'Hi·ªáu Su·∫•t Trung B√¨nh'
                            })

                            elapsed = time.time() - start
                            st.session_state.result_data = (result_df, patterns_df, summary_df, stock_lengths, gap)
                            st.success(f"‚úÖ Xong sau {elapsed:.1f}s")
                        except Exception as e:
                            st.error(f"L·ªói t·ªëi ∆∞u: {e}")
        except Exception as e:
            st.error(f"L·ªói: {e}")
    else:
        st.info("üì§ Vui l√≤ng t·∫£i file tr∆∞·ªõc!")

    if st.session_state.result_data:
        result_df, patterns_df, summary_df, stock_lengths, gap = st.session_state.result_data
        st.subheader("üìä B·∫£ng Hi·ªáu Su·∫•t")
        st.dataframe(summary_df)
        st.subheader("üìã M·∫´u C·∫Øt")
        st.dataframe(patterns_df)
        st.subheader("üìÑ Chi Ti·∫øt M·∫£nh")
        st.dataframe(result_df)

        st.subheader("üìä M√¥ Ph·ªèng")
        selected_profile = st.selectbox("Ch·ªçn M√£ Thanh", patterns_df['M√£ Thanh'].unique())
        filtered = patterns_df[patterns_df['M√£ Thanh'] == selected_profile]
        for idx, row in filtered.iterrows():
            st.markdown(f"üîπ #{row['S·ªë Thanh']} | {selected_profile} | {row['Chi·ªÅu D√†i Thanh']}mm")
            display_pattern(row, gap)

        out = io.BytesIO()
        create_output_excel(out, result_df, patterns_df, summary_df, stock_lengths, gap)
        out.seek(0)
        st.download_button("üì• T·∫£i File K·∫øt Qu·∫£", out, "ket_qua_cat_nhom.xlsx")

# Footer
st.markdown("---")
st.markdown("M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Zalo 0977 487 639")
st.markdown("·ª®ng d·ª•ng h·ªó tr·ª£ s·∫£n xu·∫•t c·ª≠a ¬© 2025")
