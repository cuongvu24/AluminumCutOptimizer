import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from cutting_optimizer import optimize_cutting
from utils import validate_input_excel, create_output_excel
import io
import time

# Set page config
st.set_page_config(
    page_title="Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m",
    page_icon="‚úÇÔ∏è",
    layout="wide"
)

# Sidebar layout
with st.sidebar:
    st.title("‚úÇÔ∏è Ph·∫ßn m·ªÅm t·ªëi ∆∞u c·∫Øt nh√¥m")
    stock_length = st.number_input("Chi·ªÅu D√†i Ti√™u Chu·∫©n (mm)", min_value=1000, value=6000, step=100)
    cutting_gap = st.number_input("Kho·∫£ng C√°ch C·∫Øt (mm)", min_value=1, value=10, step=1)
    optimization_method = st.selectbox("Ph∆∞∆°ng Ph√°p T·ªëi ∆Øu", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh"])
    optimization_options = st.radio("T√πy Ch·ªçn T·ªëi ∆Øu K√≠ch Th∆∞·ªõc Thanh", [
        "S·ª≠ D·ª•ng Chi·ªÅu D√†i C·ªë ƒê·ªãnh",
        "T·ªëi ∆Øu Trong C√°c Gi√° Tr·ªã C·ªë ƒê·ªãnh",
        "T·ªëi ∆Øu Trong Kho·∫£ng Gi√° Tr·ªã"
    ])

    if optimization_options == "T·ªëi ∆Øu Trong Kho·∫£ng Gi√° Tr·ªã":
        st.markdown("---")
        st.markdown("**C·∫•u H√¨nh Kho·∫£ng T·ªëi ∆Øu**")
        min_len = st.number_input("Chi·ªÅu D√†i T·ªëi Thi·ªÉu (mm)", min_value=1000, max_value=10000, value=5500, step=100)
        max_len = st.number_input("Chi·ªÅu D√†i T·ªëi ƒêa (mm)", min_value=min_len, max_value=20000, value=6500, step=100)
        step_len = st.number_input("B∆∞·ªõc TƒÉng K√≠ch Th∆∞·ªõc (mm)", min_value=100, value=100, step=100)

        stock_length_options = list(range(min_len, max_len + 1, step_len))
        optimize_stock_length = True
    elif optimization_options == "T·ªëi ∆Øu Trong C√°c Gi√° Tr·ªã C·ªë ƒê·ªãnh":
        st.markdown("---")
        st.markdown("**Nh·∫≠p Danh S√°ch K√≠ch Th∆∞·ªõc C·ªë ƒê·ªãnh (mm)**")
        custom_lengths_text = st.text_area(
            "Nh·∫≠p c√°c k√≠ch th∆∞·ªõc, c√°ch nhau b·∫±ng d·∫•u ph·∫©y ho·∫∑c xu·ªëng d√≤ng:",
            value=" 5000, 5500, 6000, 6500"
        )

        if "," in custom_lengths_text:
            custom_lengths_raw = custom_lengths_text.split(",")
        else:
            custom_lengths_raw = custom_lengths_text.splitlines()

        stock_length_options = []
        for val in custom_lengths_raw:
            val = val.strip()
            if val.isdigit():
                stock_length_options.append(int(val))

        if not stock_length_options:
            st.warning("‚ö†Ô∏è Danh s√°ch k√≠ch th∆∞·ªõc kh√¥ng h·ª£p l·ªá. S·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh: 6000mm")
            stock_length_options = [6000]

        optimize_stock_length = True
        st.markdown(f"‚úÖ Danh s√°ch k√≠ch th∆∞·ªõc ƒë√£ nh·∫≠p: `{', '.join(map(str, stock_length_options))}`")
    else:
        stock_length_options = [stock_length]
        optimize_stock_length = False

st.title("‚úÇÔ∏è Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m")
st.markdown("[üì¶ Xem m√£ ngu·ªìn tr√™n GitHub](https://github.com/hero9xhn/AluminumCutOptimizer)")
st.markdown("""
Ph·∫ßn m·ªÅm n√†y gi√∫p t·ªëi ∆∞u h√≥a c√°c m·∫´u c·∫Øt nh√¥m ƒë·ªÉ gi·∫£m thi·ªÉu l√£ng ph√≠. T·∫£i l√™n file Excel
v·ªõi th√¥ng tin c√°c thanh nh√¥m v√† k√≠ch th∆∞·ªõc, v√† nh·∫≠n k·∫ø ho·∫°ch c·∫Øt t·ªëi ∆∞u v·ªõi s·ªë li·ªáu chi ti·∫øt.
""")

# H∆∞·ªõng d·∫´n
with st.expander("üìñ H∆∞·ªõng D·∫´n Nh·∫≠p D·ªØ Li·ªáu", expanded=False):
    st.markdown("""
    File Excel c·ªßa b·∫°n n√™n ch·ª©a c√°c c·ªôt sau:
    1. **M√£ Thanh** - M√£/model c·ªßa thanh nh√¥m
    2. **Chi·ªÅu D√†i** - Chi·ªÅu d√†i y√™u c·∫ßu c·ªßa m·ªói thanh (mm)
    3. **S·ªë L∆∞·ª£ng** - S·ªë l∆∞·ª£ng c·∫ßn thi·∫øt cho m·ªói thanh

    B·∫°n c√≥ th·ªÉ t·∫£i bi·ªÉu m·∫´u m·∫´u ·ªü cu·ªëi trang.
    """)

# N·ªôi dung x·ª≠ l√Ω ch√≠nh s·∫Ω ƒë·∫∑t ·ªü gi·ªØa layout
uploaded_file = st.file_uploader("üì§ T·∫£i L√™n File Excel ƒê·∫ßu V√†o", type=["xlsx", "xls"])

if uploaded_file:
    try:
        input_data = pd.read_excel(uploaded_file)
        valid, message = validate_input_excel(input_data)

        if not valid:
            st.error(message)
        else:
            st.success("‚úÖ D·ªØ li·ªáu h·ª£p l·ªá! ƒêang t·ªëi ∆∞u h√≥a...")

            with st.spinner("üîÑ ƒêang x·ª≠ l√Ω d·ªØ li·ªáu..."):
                start_time = time.time()
                result_df, patterns_df, summary_df = optimize_cutting(
                    input_data,
                    stock_length=stock_length,
                    cutting_gap=cutting_gap,
                    optimization_method=optimization_method,
                    stock_length_options=stock_length_options,
                    optimize_stock_length=optimize_stock_length
                )
                end_time = time.time()

            st.success(f"üéâ T·ªëi ∆∞u h√≥a ho√†n t·∫•t sau {end_time - start_time:.2f} gi√¢y")
            st.subheader("üìä B·∫£ng t·ªïng h·ª£p hi·ªáu su·∫•t")

            # T√≠nh to√°n hi·ªáu su·∫•t n·∫øu ch∆∞a c√≥ s·∫µn
            if 'Efficiency' not in summary_df.columns:
                try:
                    summary_df['Efficiency'] = summary_df['Total Length Needed (mm)'] / summary_df['Total Stock Length (mm)']
                    summary_df['Efficiency'] = summary_df['Efficiency'].fillna(0).apply(lambda x: f"{x*100:.2f}%")
                except Exception as eff_err:
                    st.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t√≠nh hi·ªáu su·∫•t: {eff_err}")
                
                summary_df = summary_df.rename(columns={
        'Profile Code': 'M√£ Thanh',
        'Total Pieces': 'T·ªïng S·ªë ƒêo·∫°n',
        'Total Bars Used': 'T·ªïng Thanh S·ª≠ D·ª•ng',
        'Total Length Needed (mm)': 'T·ªïng Chi·ªÅu D√†i C·∫ßn (mm)',
        'Total Stock Length (mm)': 'T·ªïng Chi·ªÅu D√†i Nguy√™n Li·ªáu (mm)',
        'Waste (mm)': 'Ph·∫ø Li·ªáu (mm)',
        'Overall Efficiency': 'Hi·ªáu Su·∫•t T·ªïng Th·ªÉ',
        'Efficiency': 'Hi·ªáu Su·∫•t (%)'
})
                st.dataframe(summary_df)
                st.subheader("üìã Danh s√°ch m·∫´u c·∫Øt chi ti·∫øt")
                patterns_df = patterns_df.rename(columns={
        'Profile Code': 'M√£ Thanh',
        'Bar Number': 'S·ªë Thanh',
        'Stock Length': 'Chi·ªÅu D√†i Thanh',
        'Used Length': 'Chi·ªÅu D√†i S·ª≠ D·ª•ng',
        'Remaining Length': 'Chi·ªÅu D√†i C√≤n L·∫°i',
        'Efficiency': 'Hi·ªáu Su·∫•t',
        'Cutting Pattern': 'M·∫´u C·∫Øt',
        'Pieces': 'S·ªë ƒêo·∫°n C·∫Øt'
})
            st.dataframe(patterns_df)

            st.subheader("üì• T·∫£i k·∫øt qu·∫£ v·ªÅ m√°y")
            output = io.BytesIO()
            create_output_excel(output, result_df, patterns_df, summary_df, stock_length, cutting_gap)
            output.seek(0)
            st.download_button("üì• T·∫£i xu·ªëng b·∫£ng Excel k·∫øt qu·∫£", output, "ket_qua_toi_uu.xlsx")

    except Exception as e:
        st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")

# Footer
st.markdown("---")
st.markdown("Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m ¬© 2025 By Cuong Vu")
