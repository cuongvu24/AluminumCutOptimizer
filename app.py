import pandas as pd
import streamlit as st
import io

def validate_input_excel(df):
    required_columns = ["Profile Code", "Length", "Quantity"]
    vietnamese_columns = {
        "M√£ Thanh": "Profile Code",
        "Chi·ªÅu D√†i": "Length",
        "S·ªë L∆∞·ª£ng": "Quantity"
    }

    for vn_col, en_col in vietnamese_columns.items():
        if vn_col in df.columns:
            df.rename(columns={vn_col: en_col}, inplace=True)

    missing = [col for col in required_columns if col not in df.columns]
    if missing:
        return False, f"Thi·∫øu c√°c c·ªôt b·∫Øt bu·ªôc: {', '.join(missing)}"

    try:
        df['Length'] = pd.to_numeric(df['Length'])
        df['Quantity'] = pd.to_numeric(df['Quantity'])
    except ValueError:
        return False, "Chi·ªÅu D√†i v√† S·ªë L∆∞·ª£ng ph·∫£i l√† s·ªë"

    if (df['Length'] <= 0).any():
        return False, "Chi·ªÅu D√†i ph·∫£i > 0"
    if (df['Quantity'] <= 0).any():
        return False, "S·ªë L∆∞·ª£ng ph·∫£i > 0"
    if df['Profile Code'].isnull().any() or (df['Profile Code'] == '').any():
        return False, "M√£ Thanh kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    if len(df) == 0:
        return False, "T·ªáp kh√¥ng c√≥ d·ªØ li·ªáu"

    return True, "T·ªáp h·ª£p l·ªá"


def create_accessory_summary(input_df, output_stream):
    required_cols = ['m√£ ph·ª• ki·ªán', 't√™n ph·ª• phi·ªán', 'ƒë∆°n v·ªã t√≠nh', 'm√£ h√†ng', 's·ªë l∆∞·ª£ng']
    missing = [col for col in required_cols if col not in input_df.columns]
    if missing:
        raise ValueError(f"Thi·∫øu c·ªôt: {', '.join(missing)}")

    grouped = input_df.groupby(['m√£ ph·ª• ki·ªán', 't√™n ph·ª• phi·ªán', 'ƒë∆°n v·ªã t√≠nh', 'm√£ h√†ng'])['s·ªë l∆∞·ª£ng'].sum().reset_index()
    grouped = grouped.rename(columns={'s·ªë l∆∞·ª£ng': 'T·ªïng S·ªë L∆∞·ª£ng'})

    with pd.ExcelWriter(output_stream, engine='openpyxl') as writer:
        grouped.to_excel(writer, sheet_name="T·ªïng H·ª£p Ph·ª• Ki·ªán", index=False)

    return grouped

# Giao di·ªán d√πng chung cho c·∫£ ph·ª• ki·ªán v√† nh√¥m
st.header("üì§ T·∫£i L√™n T·ªáp D·ªØ Li·ªáu Excel")
uploaded_file = st.file_uploader("Ch·ªçn T·ªáp Excel (Ph·ª• Ki·ªán ho·∫∑c Nh√¥m)", type=["xlsx", "xls"])

# Tabs ri√™ng bi·ªát cho hai lo·∫°i x·ª≠ l√Ω
tab_upload, tab1, tab2 = st.tabs(["üìÅ T·∫£i M·∫´u Nh·∫≠p", "üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m"])

with tab_upload:
    st.subheader("üì• T·∫£i xu·ªëng m·∫´u nh·∫≠p li·ªáu")
    import io
    sample_df = pd.DataFrame({
        'Profile Code': ['ABC', 'ABC'],
        'Length': [1000, 1200],
        'Quantity': [3, 4]
    })
    output = io.BytesIO()
    sample_df.to_excel(output, index=False)
    output.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u c·∫Øt nh√¥m", output, "mau_cat_nhom.xlsx")

    sample2 = pd.DataFrame({
        'm√£ ph·ª• ki·ªán': ['PK001', 'PK002'],
        't√™n ph·ª• phi·ªán': ['GioƒÉng', 'Bulong'],
        'ƒë∆°n v·ªã t√≠nh': ['c√°i', 'b·ªô'],
        'm√£ h√†ng': ['NHOM1', 'NHOM2'],
        's·ªë l∆∞·ª£ng': [10, 20]
    })
    out2 = io.BytesIO()
    sample2.to_excel(out2, index=False)
    out2.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u ph·ª• ki·ªán", out2, "mau_phu_kien.xlsx")

with tab_upload:
    st.subheader("üì• T·∫£i xu·ªëng m·∫´u nh·∫≠p li·ªáu")
    st.markdown("""
    üëâ Vui l√≤ng s·ª≠ d·ª•ng c√°c m·∫´u b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ch√≠nh x√°c khi nh·∫≠p li·ªáu:

    - **M·∫´u C·∫Øt Nh√¥m** g·ªìm c√°c c·ªôt: `M√£ Thanh`, `Chi·ªÅu D√†i`, `S·ªë L∆∞·ª£ng`
    - **M·∫´u Ph·ª• Ki·ªán** g·ªìm c√°c c·ªôt: `m√£ ph·ª• ki·ªán`, `t√™n ph·ª• phi·ªán`, `ƒë∆°n v·ªã t√≠nh`, `m√£ h√†ng`, `s·ªë l∆∞·ª£ng`

    Sau khi ƒëi·ªÅn d·ªØ li·ªáu, h√£y quay l·∫°i tab t∆∞∆°ng ·ª©ng v√† t·∫£i l√™n file ƒë·ªÉ t√≠nh to√°n.
    """)
    import io
    sample_df = pd.DataFrame({
        'Profile Code': ['ABC', 'ABC'],
        'Length': [1000, 1200],
        'Quantity': [3, 4]
    })
    output = io.BytesIO()
    sample_df.to_excel(output, index=False)
    output.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u c·∫Øt nh√¥m", output, "mau_cat_nhom.xlsx")

    sample2 = pd.DataFrame({
        'm√£ ph·ª• ki·ªán': ['PK001', 'PK002'],
        't√™n ph·ª• phi·ªán': ['GioƒÉng', 'Bulong'],
        'ƒë∆°n v·ªã t√≠nh': ['c√°i', 'b·ªô'],
        'm√£ h√†ng': ['NHOM1', 'NHOM2'],
        's·ªë l∆∞·ª£ng': [10, 20]
    })
    out2 = io.BytesIO()
    sample2.to_excel(out2, index=False)
    out2.seek(0)
    st.download_button("üìÑ T·∫£i m·∫´u ph·ª• ki·ªán", out2, "mau_phu_kien.xlsx")

# Tabs v·∫´n hi·ªán ra ngay c·∫£ khi ch∆∞a upload file
if True:
    tab1, tab2 = st.tabs(["üì¶ T·ªïng H·ª£p Ph·ª• Ki·ªán", "‚úÇÔ∏è T·ªëi ∆Øu H√≥a C·∫Øt Nh√¥m"])

    with tab1:
        try:
            acc_df = pd.read_excel(uploaded_file)
            st.success("‚úÖ File h·ª£p l·ªá, ƒëang t·ªïng h·ª£p ph·ª• ki·ªán...")
            output = io.BytesIO()
            summary_df = create_accessory_summary(acc_df, output)
            output.seek(0)
            st.subheader("üìã K·∫øt Qu·∫£ T·ªïng H·ª£p Ph·ª• Ki·ªán")
            st.dataframe(summary_df)
            st.download_button(
                label="üì• T·∫£i Xu·ªëng K·∫øt Qu·∫£ Ph·ª• Ki·ªán",
                data=output,
                file_name="tong_hop_phu_kien.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        except Exception as e:
            st.warning("Kh√¥ng ph·∫£i file ph·ª• ki·ªán ho·∫∑c thi·∫øu c·ªôt ph√π h·ª£p.")

    with tab2:
        try:
            df = pd.read_excel(uploaded_file)
            valid, message = validate_input_excel(df)
            if not valid:
                st.error(message)
            else:
                st.success("‚úÖ D·ªØ li·ªáu nh√¥m h·ª£p l·ªá! S·∫µn s√†ng x·ª≠ l√Ω t·ªëi ∆∞u h√≥a.")
                st.dataframe(df)
                import time
from cutting_optimizer import optimize_cutting
from utils import create_output_excel

                stock_length = st.number_input("Chi·ªÅu D√†i Ti√™u Chu·∫©n (mm)", min_value=1000, value=6000, step=100)
                cutting_gap = st.number_input("Kho·∫£ng C√°ch C·∫Øt (mm)", min_value=1, value=10, step=1)
                optimization_method = st.selectbox("Ph∆∞∆°ng Ph√°p T·ªëi ∆Øu", ["T·ªëi ∆Øu Hi·ªáu Su·∫•t Cao Nh·∫•t", "T·ªëi ∆Øu S·ªë L∆∞·ª£ng Thanh"])
                length_options_text = st.text_input("Nh·∫≠p c√°c k√≠ch th∆∞·ªõc thanh c√≥ th·ªÉ d√πng (c√°ch nhau b·ªüi d·∫•u ph·∫©y)", "5800, 6000, 6200, 6500")

                if st.button("üöÄ B·∫Øt ƒë·∫ßu t·ªëi ∆∞u h√≥a"):
                    with st.spinner("üîÑ ƒêang t·ªëi ∆∞u h√≥a..."):
                        try:
                            stock_length_options = [int(x.strip()) for x in length_options_text.split(",") if x.strip().isdigit()]
                            start_time = time.time()
                            result_df, patterns_df, summary_df = optimize_cutting(
                                df,
                                stock_length=stock_length,
                                cutting_gap=cutting_gap,
                                optimization_method=optimization_method,
                                stock_length_options=stock_length_options,
                                optimize_stock_length=True
                            )
                            end_time = time.time()
                            st.success(f"‚úÖ T·ªëi ∆∞u ho√†n t·∫•t sau {end_time - start_time:.2f} gi√¢y")
                            st.dataframe(summary_df)
                            output = io.BytesIO()
                            create_output_excel(output, result_df, patterns_df, summary_df, stock_length, cutting_gap)
                            output.seek(0)
                            st.download_button(
                                label="üì• T·∫£i Xu·ªëng K·∫øt Qu·∫£ C·∫Øt Nh√¥m",
                                data=output,
                                file_name="ket_qua_cat_nhom.xlsx",
                                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                            )
                        except Exception as opt_e:
                            st.error(f"‚ùå L·ªói t·ªëi ∆∞u h√≥a: {opt_e}")
        except Exception as e:
            st.error(f"‚ùå L·ªói x·ª≠ l√Ω: {e}")


# Footer
st.markdown("---")
st.markdown("Ph·∫ßn M·ªÅm T·ªëi ∆Øu C·∫Øt Nh√¥m ¬© 2025 By C∆∞·ªùng V≈©")
st.markdown("M·ªçi th·∫Øc m·∫Øc xin li√™n h·ªá Zalo 0977 487 639")
